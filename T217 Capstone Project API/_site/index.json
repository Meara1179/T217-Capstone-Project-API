{
  "api/T217_Capstone_Project_API.Authentication.UserAuthenticationFilter.html": {
    "href": "api/T217_Capstone_Project_API.Authentication.UserAuthenticationFilter.html",
    "title": "Class UserAuthenticationFilter | StakeholderRisks",
    "summary": "Class UserAuthenticationFilter Namespace T217_Capstone_Project_API.Authentication Assembly T217 Capstone Project API.dll AuthenticationFilter to verify that the User has supplied an API key in the headers, and that the User exists. public class UserAuthenticationFilter : IAuthorizationFilter, IFilterMetadata Inheritance object UserAuthenticationFilter Implements IAuthorizationFilter IFilterMetadata Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors UserAuthenticationFilter(IConfiguration, IUserRepository) public UserAuthenticationFilter(IConfiguration configuration, IUserRepository repo) Parameters configuration IConfiguration repo IUserRepository Methods OnAuthorization(AuthorizationFilterContext) Tries to extract the API key from the headers, then checks the database if the User associated with the key exists. public void OnAuthorization(AuthorizationFilterContext context) Parameters context AuthorizationFilterContext"
  },
  "api/T217_Capstone_Project_API.Authentication.html": {
    "href": "api/T217_Capstone_Project_API.Authentication.html",
    "title": "Namespace T217_Capstone_Project_API.Authentication | StakeholderRisks",
    "summary": "Namespace T217_Capstone_Project_API.Authentication Classes UserAuthenticationFilter AuthenticationFilter to verify that the User has supplied an API key in the headers, and that the User exists."
  },
  "api/T217_Capstone_Project_API.Controllers.ProjectUsersController.html": {
    "href": "api/T217_Capstone_Project_API.Controllers.ProjectUsersController.html",
    "title": "Class ProjectUsersController | StakeholderRisks",
    "summary": "Class ProjectUsersController Namespace T217_Capstone_Project_API.Controllers Assembly T217 Capstone Project API.dll API endpoint controller that manages all endpoints related to ProjectUsers. [Route(\"api/[controller]\")] [ApiController] public class ProjectUsersController : ControllerBase Inheritance object ControllerBase ProjectUsersController Inherited Members ControllerBase.StatusCode(int) ControllerBase.StatusCode(int, object) ControllerBase.Content(string) ControllerBase.Content(string, string) ControllerBase.Content(string, string, Encoding) ControllerBase.Content(string, MediaTypeHeaderValue) ControllerBase.NoContent() ControllerBase.Ok() ControllerBase.Ok(object) ControllerBase.Redirect(string) ControllerBase.RedirectPermanent(string) ControllerBase.RedirectPreserveMethod(string) ControllerBase.RedirectPermanentPreserveMethod(string) ControllerBase.LocalRedirect(string) ControllerBase.LocalRedirectPermanent(string) ControllerBase.LocalRedirectPreserveMethod(string) ControllerBase.LocalRedirectPermanentPreserveMethod(string) ControllerBase.RedirectToAction() ControllerBase.RedirectToAction(string) ControllerBase.RedirectToAction(string, object) ControllerBase.RedirectToAction(string, string) ControllerBase.RedirectToAction(string, string, object) ControllerBase.RedirectToAction(string, string, string) ControllerBase.RedirectToAction(string, string, object, string) ControllerBase.RedirectToActionPreserveMethod(string, string, object, string) ControllerBase.RedirectToActionPermanent(string) ControllerBase.RedirectToActionPermanent(string, object) ControllerBase.RedirectToActionPermanent(string, string) ControllerBase.RedirectToActionPermanent(string, string, string) ControllerBase.RedirectToActionPermanent(string, string, object) ControllerBase.RedirectToActionPermanent(string, string, object, string) ControllerBase.RedirectToActionPermanentPreserveMethod(string, string, object, string) ControllerBase.RedirectToRoute(string) ControllerBase.RedirectToRoute(object) ControllerBase.RedirectToRoute(string, object) ControllerBase.RedirectToRoute(string, string) ControllerBase.RedirectToRoute(string, object, string) ControllerBase.RedirectToRoutePreserveMethod(string, object, string) ControllerBase.RedirectToRoutePermanent(string) ControllerBase.RedirectToRoutePermanent(object) ControllerBase.RedirectToRoutePermanent(string, object) ControllerBase.RedirectToRoutePermanent(string, string) ControllerBase.RedirectToRoutePermanent(string, object, string) ControllerBase.RedirectToRoutePermanentPreserveMethod(string, object, string) ControllerBase.RedirectToPage(string) ControllerBase.RedirectToPage(string, object) ControllerBase.RedirectToPage(string, string) ControllerBase.RedirectToPage(string, string, object) ControllerBase.RedirectToPage(string, string, string) ControllerBase.RedirectToPage(string, string, object, string) ControllerBase.RedirectToPagePermanent(string) ControllerBase.RedirectToPagePermanent(string, object) ControllerBase.RedirectToPagePermanent(string, string) ControllerBase.RedirectToPagePermanent(string, string, string) ControllerBase.RedirectToPagePermanent(string, string, object, string) ControllerBase.RedirectToPagePreserveMethod(string, string, object, string) ControllerBase.RedirectToPagePermanentPreserveMethod(string, string, object, string) ControllerBase.File(byte[], string) ControllerBase.File(byte[], string, bool) ControllerBase.File(byte[], string, string) ControllerBase.File(byte[], string, string, bool) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string) ControllerBase.File(Stream, string, bool) ControllerBase.File(Stream, string, string) ControllerBase.File(Stream, string, string, bool) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string) ControllerBase.File(string, string, bool) ControllerBase.File(string, string, string) ControllerBase.File(string, string, string, bool) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string) ControllerBase.PhysicalFile(string, string, bool) ControllerBase.PhysicalFile(string, string, string) ControllerBase.PhysicalFile(string, string, string, bool) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.Unauthorized() ControllerBase.Unauthorized(object) ControllerBase.NotFound() ControllerBase.NotFound(object) ControllerBase.BadRequest() ControllerBase.BadRequest(object) ControllerBase.BadRequest(ModelStateDictionary) ControllerBase.UnprocessableEntity() ControllerBase.UnprocessableEntity(object) ControllerBase.UnprocessableEntity(ModelStateDictionary) ControllerBase.Conflict() ControllerBase.Conflict(object) ControllerBase.Conflict(ModelStateDictionary) ControllerBase.Problem(string, string, int?, string, string) ControllerBase.Problem(string, string, int?, string, string, IDictionary<string, object>) ControllerBase.ValidationProblem(ValidationProblemDetails) ControllerBase.ValidationProblem(ModelStateDictionary) ControllerBase.ValidationProblem() ControllerBase.ValidationProblem(string, string, int?, string, string, ModelStateDictionary) ControllerBase.ValidationProblem(string, string, int?, string, string, ModelStateDictionary, IDictionary<string, object>) ControllerBase.Created() ControllerBase.Created(string, object) ControllerBase.Created(Uri, object) ControllerBase.CreatedAtAction(string, object) ControllerBase.CreatedAtAction(string, object, object) ControllerBase.CreatedAtAction(string, string, object, object) ControllerBase.CreatedAtRoute(string, object) ControllerBase.CreatedAtRoute(object, object) ControllerBase.CreatedAtRoute(string, object, object) ControllerBase.Accepted() ControllerBase.Accepted(object) ControllerBase.Accepted(Uri) ControllerBase.Accepted(string) ControllerBase.Accepted(string, object) ControllerBase.Accepted(Uri, object) ControllerBase.AcceptedAtAction(string) ControllerBase.AcceptedAtAction(string, string) ControllerBase.AcceptedAtAction(string, object) ControllerBase.AcceptedAtAction(string, string, object) ControllerBase.AcceptedAtAction(string, object, object) ControllerBase.AcceptedAtAction(string, string, object, object) ControllerBase.AcceptedAtRoute(object) ControllerBase.AcceptedAtRoute(string) ControllerBase.AcceptedAtRoute(string, object) ControllerBase.AcceptedAtRoute(object, object) ControllerBase.AcceptedAtRoute(string, object, object) ControllerBase.Challenge() ControllerBase.Challenge(params string[]) ControllerBase.Challenge(AuthenticationProperties) ControllerBase.Challenge(AuthenticationProperties, params string[]) ControllerBase.Forbid() ControllerBase.Forbid(params string[]) ControllerBase.Forbid(AuthenticationProperties) ControllerBase.Forbid(AuthenticationProperties, params string[]) ControllerBase.SignIn(ClaimsPrincipal) ControllerBase.SignIn(ClaimsPrincipal, string) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties, string) ControllerBase.SignOut() ControllerBase.SignOut(AuthenticationProperties) ControllerBase.SignOut(params string[]) ControllerBase.SignOut(AuthenticationProperties, params string[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync(object, Type, string) ControllerBase.TryUpdateModelAsync(object, Type, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryValidateModel(object) ControllerBase.TryValidateModel(object, string) ControllerBase.HttpContext ControllerBase.Request ControllerBase.Response ControllerBase.RouteData ControllerBase.ModelState ControllerBase.ControllerContext ControllerBase.MetadataProvider ControllerBase.ModelBinderFactory ControllerBase.Url ControllerBase.ObjectValidator ControllerBase.ProblemDetailsFactory ControllerBase.User ControllerBase.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ProjectUsersController(IProjectUserRepository) public ProjectUsersController(IProjectUserRepository repo) Parameters repo IProjectUserRepository Methods AddProjectUserToProject(int, int, ProjectUserPermissionsDTO) Creates a new ProjectUser associated with the supplied User ID and Project ID, with the supplied permissions if the user has the required authorisation. [HttpPost] [ServiceFilter(typeof(UserAuthenticationFilter))] public Task<ActionResult<ProjectUser>> AddProjectUserToProject(int projectID, int userID, ProjectUserPermissionsDTO projectUserPermissions) Parameters projectID int The ID of the Project which the ProjectUser will be created for. userID int The ID of the User which the ProjectUser will be created for. projectUserPermissions ProjectUserPermissionsDTO The permissions of the ProjectUser Returns Task<ActionResult<ProjectUser>> Returns a 201 Created status message. DeleteProjectUser(int) Removes the ProjectUser with the matching ID from the database if the user has the required authorisation. [HttpDelete(\"{id}\")] [ServiceFilter(typeof(UserAuthenticationFilter))] public Task<IActionResult> DeleteProjectUser(int id) Parameters id int The ID of the ProjectUser to be deleted. Returns Task<IActionResult> A status code depending on the results of the deletion. GetProjectUsersByProjectID(int) Returns all the ProjectUsers associated with the supplied Project ID if the user has the required authorisation. [HttpGet(\"{id}\")] [ServiceFilter(typeof(UserAuthenticationFilter))] public Task<ActionResult<IEnumerable<ProjectUser>>> GetProjectUsersByProjectID(int id) Parameters id int The ID of the Project. Returns Task<ActionResult<IEnumerable<ProjectUser>>> A list of all ProjectUsers for the associated Project, or a 404 Not Found status code. PutProjectUser(int, ProjectUserPermissionsDTO) Updates the ProjectUser with the supplied ID with the new ProjectUser if the user has the required authorisation. The ID must match the ProjectUser ID of the supplied ProjectUser. [HttpPut(\"{id}\")] [ServiceFilter(typeof(UserAuthenticationFilter))] public Task<IActionResult> PutProjectUser(int id, ProjectUserPermissionsDTO projectUserPermissions) Parameters id int The ID of the ProjectUser to be updated. projectUserPermissions ProjectUserPermissionsDTO The new permissions to replace the existing ProjectUser. Returns Task<IActionResult> A status code depending on the results of the update."
  },
  "api/T217_Capstone_Project_API.Controllers.ProjectsController.html": {
    "href": "api/T217_Capstone_Project_API.Controllers.ProjectsController.html",
    "title": "Class ProjectsController | StakeholderRisks",
    "summary": "Class ProjectsController Namespace T217_Capstone_Project_API.Controllers Assembly T217 Capstone Project API.dll API endpoint controller that manages all endpoints related to Projects. [Route(\"api/[controller]\")] [ApiController] public class ProjectsController : ControllerBase Inheritance object ControllerBase ProjectsController Inherited Members ControllerBase.StatusCode(int) ControllerBase.StatusCode(int, object) ControllerBase.Content(string) ControllerBase.Content(string, string) ControllerBase.Content(string, string, Encoding) ControllerBase.Content(string, MediaTypeHeaderValue) ControllerBase.NoContent() ControllerBase.Ok() ControllerBase.Ok(object) ControllerBase.Redirect(string) ControllerBase.RedirectPermanent(string) ControllerBase.RedirectPreserveMethod(string) ControllerBase.RedirectPermanentPreserveMethod(string) ControllerBase.LocalRedirect(string) ControllerBase.LocalRedirectPermanent(string) ControllerBase.LocalRedirectPreserveMethod(string) ControllerBase.LocalRedirectPermanentPreserveMethod(string) ControllerBase.RedirectToAction() ControllerBase.RedirectToAction(string) ControllerBase.RedirectToAction(string, object) ControllerBase.RedirectToAction(string, string) ControllerBase.RedirectToAction(string, string, object) ControllerBase.RedirectToAction(string, string, string) ControllerBase.RedirectToAction(string, string, object, string) ControllerBase.RedirectToActionPreserveMethod(string, string, object, string) ControllerBase.RedirectToActionPermanent(string) ControllerBase.RedirectToActionPermanent(string, object) ControllerBase.RedirectToActionPermanent(string, string) ControllerBase.RedirectToActionPermanent(string, string, string) ControllerBase.RedirectToActionPermanent(string, string, object) ControllerBase.RedirectToActionPermanent(string, string, object, string) ControllerBase.RedirectToActionPermanentPreserveMethod(string, string, object, string) ControllerBase.RedirectToRoute(string) ControllerBase.RedirectToRoute(object) ControllerBase.RedirectToRoute(string, object) ControllerBase.RedirectToRoute(string, string) ControllerBase.RedirectToRoute(string, object, string) ControllerBase.RedirectToRoutePreserveMethod(string, object, string) ControllerBase.RedirectToRoutePermanent(string) ControllerBase.RedirectToRoutePermanent(object) ControllerBase.RedirectToRoutePermanent(string, object) ControllerBase.RedirectToRoutePermanent(string, string) ControllerBase.RedirectToRoutePermanent(string, object, string) ControllerBase.RedirectToRoutePermanentPreserveMethod(string, object, string) ControllerBase.RedirectToPage(string) ControllerBase.RedirectToPage(string, object) ControllerBase.RedirectToPage(string, string) ControllerBase.RedirectToPage(string, string, object) ControllerBase.RedirectToPage(string, string, string) ControllerBase.RedirectToPage(string, string, object, string) ControllerBase.RedirectToPagePermanent(string) ControllerBase.RedirectToPagePermanent(string, object) ControllerBase.RedirectToPagePermanent(string, string) ControllerBase.RedirectToPagePermanent(string, string, string) ControllerBase.RedirectToPagePermanent(string, string, object, string) ControllerBase.RedirectToPagePreserveMethod(string, string, object, string) ControllerBase.RedirectToPagePermanentPreserveMethod(string, string, object, string) ControllerBase.File(byte[], string) ControllerBase.File(byte[], string, bool) ControllerBase.File(byte[], string, string) ControllerBase.File(byte[], string, string, bool) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string) ControllerBase.File(Stream, string, bool) ControllerBase.File(Stream, string, string) ControllerBase.File(Stream, string, string, bool) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string) ControllerBase.File(string, string, bool) ControllerBase.File(string, string, string) ControllerBase.File(string, string, string, bool) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string) ControllerBase.PhysicalFile(string, string, bool) ControllerBase.PhysicalFile(string, string, string) ControllerBase.PhysicalFile(string, string, string, bool) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.Unauthorized() ControllerBase.Unauthorized(object) ControllerBase.NotFound() ControllerBase.NotFound(object) ControllerBase.BadRequest() ControllerBase.BadRequest(object) ControllerBase.BadRequest(ModelStateDictionary) ControllerBase.UnprocessableEntity() ControllerBase.UnprocessableEntity(object) ControllerBase.UnprocessableEntity(ModelStateDictionary) ControllerBase.Conflict() ControllerBase.Conflict(object) ControllerBase.Conflict(ModelStateDictionary) ControllerBase.Problem(string, string, int?, string, string) ControllerBase.Problem(string, string, int?, string, string, IDictionary<string, object>) ControllerBase.ValidationProblem(ValidationProblemDetails) ControllerBase.ValidationProblem(ModelStateDictionary) ControllerBase.ValidationProblem() ControllerBase.ValidationProblem(string, string, int?, string, string, ModelStateDictionary) ControllerBase.ValidationProblem(string, string, int?, string, string, ModelStateDictionary, IDictionary<string, object>) ControllerBase.Created() ControllerBase.Created(string, object) ControllerBase.Created(Uri, object) ControllerBase.CreatedAtAction(string, object) ControllerBase.CreatedAtAction(string, object, object) ControllerBase.CreatedAtAction(string, string, object, object) ControllerBase.CreatedAtRoute(string, object) ControllerBase.CreatedAtRoute(object, object) ControllerBase.CreatedAtRoute(string, object, object) ControllerBase.Accepted() ControllerBase.Accepted(object) ControllerBase.Accepted(Uri) ControllerBase.Accepted(string) ControllerBase.Accepted(string, object) ControllerBase.Accepted(Uri, object) ControllerBase.AcceptedAtAction(string) ControllerBase.AcceptedAtAction(string, string) ControllerBase.AcceptedAtAction(string, object) ControllerBase.AcceptedAtAction(string, string, object) ControllerBase.AcceptedAtAction(string, object, object) ControllerBase.AcceptedAtAction(string, string, object, object) ControllerBase.AcceptedAtRoute(object) ControllerBase.AcceptedAtRoute(string) ControllerBase.AcceptedAtRoute(string, object) ControllerBase.AcceptedAtRoute(object, object) ControllerBase.AcceptedAtRoute(string, object, object) ControllerBase.Challenge() ControllerBase.Challenge(params string[]) ControllerBase.Challenge(AuthenticationProperties) ControllerBase.Challenge(AuthenticationProperties, params string[]) ControllerBase.Forbid() ControllerBase.Forbid(params string[]) ControllerBase.Forbid(AuthenticationProperties) ControllerBase.Forbid(AuthenticationProperties, params string[]) ControllerBase.SignIn(ClaimsPrincipal) ControllerBase.SignIn(ClaimsPrincipal, string) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties, string) ControllerBase.SignOut() ControllerBase.SignOut(AuthenticationProperties) ControllerBase.SignOut(params string[]) ControllerBase.SignOut(AuthenticationProperties, params string[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync(object, Type, string) ControllerBase.TryUpdateModelAsync(object, Type, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryValidateModel(object) ControllerBase.TryValidateModel(object, string) ControllerBase.HttpContext ControllerBase.Request ControllerBase.Response ControllerBase.RouteData ControllerBase.ModelState ControllerBase.ControllerContext ControllerBase.MetadataProvider ControllerBase.ModelBinderFactory ControllerBase.Url ControllerBase.ObjectValidator ControllerBase.ProblemDetailsFactory ControllerBase.User ControllerBase.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ProjectsController(IProjectRepository) public ProjectsController(IProjectRepository repo) Parameters repo IProjectRepository Methods DeleteProject(int) Removes the project with the matching ID from the database if the user has the required authorisation. [HttpDelete(\"{id}\")] [ServiceFilter(typeof(UserAuthenticationFilter))] public Task<ActionResult> DeleteProject(int id) Parameters id int The ID of the Project to be deleted. Returns Task<ActionResult> A status code depending on the results of the deletion. GetProject(int) Gets the Project with the associated ID, and returns it if it exists and the user associated with the included API Key in the header has access to it. [HttpGet(\"{id}\")] [ServiceFilter(typeof(UserAuthenticationFilter))] public Task<ActionResult<Project>> GetProject(int id) Parameters id int The ID of the desired Project. Returns Task<ActionResult<Project>> The Project with the matching ID, or a 404 Not Found status code. GetProjects() Gets a list of all the Projects that the user associated with the included API Key in the header has access to read. [HttpGet] [ServiceFilter(typeof(UserAuthenticationFilter))] public Task<ActionResult<IEnumerable<Project>>> GetProjects() Returns Task<ActionResult<IEnumerable<Project>>> An list of the Projects the user has access to, or a 404 Not Found status code. PostProject(ProjectDTO) Creates a new Project and associated ProjectUser with the values supplied in the ProjectDTO. [HttpPost] [ServiceFilter(typeof(UserAuthenticationFilter))] public Task<ActionResult<Project>> PostProject(ProjectDTO project) Parameters project ProjectDTO Returns Task<ActionResult<Project>> The newly created Project. PutProject(int, Project) Updates the Project with the supplied ID with the new Project if the user has the required authorisation. The ID must match the project ID of the supplied Project. [HttpPut(\"{id}\")] [ServiceFilter(typeof(UserAuthenticationFilter))] public Task<IActionResult> PutProject(int id, Project project) Parameters id int The ID of the Project to be updated. project Project The new Project that will replace the existing one. Returns Task<IActionResult> A status code depending on the results of the update."
  },
  "api/T217_Capstone_Project_API.Controllers.RisksController.html": {
    "href": "api/T217_Capstone_Project_API.Controllers.RisksController.html",
    "title": "Class RisksController | StakeholderRisks",
    "summary": "Class RisksController Namespace T217_Capstone_Project_API.Controllers Assembly T217 Capstone Project API.dll API endpoint controller that manages all endpoints related to the Risks. [Route(\"api/[controller]\")] [ApiController] public class RisksController : ControllerBase Inheritance object ControllerBase RisksController Inherited Members ControllerBase.StatusCode(int) ControllerBase.StatusCode(int, object) ControllerBase.Content(string) ControllerBase.Content(string, string) ControllerBase.Content(string, string, Encoding) ControllerBase.Content(string, MediaTypeHeaderValue) ControllerBase.NoContent() ControllerBase.Ok() ControllerBase.Ok(object) ControllerBase.Redirect(string) ControllerBase.RedirectPermanent(string) ControllerBase.RedirectPreserveMethod(string) ControllerBase.RedirectPermanentPreserveMethod(string) ControllerBase.LocalRedirect(string) ControllerBase.LocalRedirectPermanent(string) ControllerBase.LocalRedirectPreserveMethod(string) ControllerBase.LocalRedirectPermanentPreserveMethod(string) ControllerBase.RedirectToAction() ControllerBase.RedirectToAction(string) ControllerBase.RedirectToAction(string, object) ControllerBase.RedirectToAction(string, string) ControllerBase.RedirectToAction(string, string, object) ControllerBase.RedirectToAction(string, string, string) ControllerBase.RedirectToAction(string, string, object, string) ControllerBase.RedirectToActionPreserveMethod(string, string, object, string) ControllerBase.RedirectToActionPermanent(string) ControllerBase.RedirectToActionPermanent(string, object) ControllerBase.RedirectToActionPermanent(string, string) ControllerBase.RedirectToActionPermanent(string, string, string) ControllerBase.RedirectToActionPermanent(string, string, object) ControllerBase.RedirectToActionPermanent(string, string, object, string) ControllerBase.RedirectToActionPermanentPreserveMethod(string, string, object, string) ControllerBase.RedirectToRoute(string) ControllerBase.RedirectToRoute(object) ControllerBase.RedirectToRoute(string, object) ControllerBase.RedirectToRoute(string, string) ControllerBase.RedirectToRoute(string, object, string) ControllerBase.RedirectToRoutePreserveMethod(string, object, string) ControllerBase.RedirectToRoutePermanent(string) ControllerBase.RedirectToRoutePermanent(object) ControllerBase.RedirectToRoutePermanent(string, object) ControllerBase.RedirectToRoutePermanent(string, string) ControllerBase.RedirectToRoutePermanent(string, object, string) ControllerBase.RedirectToRoutePermanentPreserveMethod(string, object, string) ControllerBase.RedirectToPage(string) ControllerBase.RedirectToPage(string, object) ControllerBase.RedirectToPage(string, string) ControllerBase.RedirectToPage(string, string, object) ControllerBase.RedirectToPage(string, string, string) ControllerBase.RedirectToPage(string, string, object, string) ControllerBase.RedirectToPagePermanent(string) ControllerBase.RedirectToPagePermanent(string, object) ControllerBase.RedirectToPagePermanent(string, string) ControllerBase.RedirectToPagePermanent(string, string, string) ControllerBase.RedirectToPagePermanent(string, string, object, string) ControllerBase.RedirectToPagePreserveMethod(string, string, object, string) ControllerBase.RedirectToPagePermanentPreserveMethod(string, string, object, string) ControllerBase.File(byte[], string) ControllerBase.File(byte[], string, bool) ControllerBase.File(byte[], string, string) ControllerBase.File(byte[], string, string, bool) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string) ControllerBase.File(Stream, string, bool) ControllerBase.File(Stream, string, string) ControllerBase.File(Stream, string, string, bool) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string) ControllerBase.File(string, string, bool) ControllerBase.File(string, string, string) ControllerBase.File(string, string, string, bool) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string) ControllerBase.PhysicalFile(string, string, bool) ControllerBase.PhysicalFile(string, string, string) ControllerBase.PhysicalFile(string, string, string, bool) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.Unauthorized() ControllerBase.Unauthorized(object) ControllerBase.NotFound() ControllerBase.NotFound(object) ControllerBase.BadRequest() ControllerBase.BadRequest(object) ControllerBase.BadRequest(ModelStateDictionary) ControllerBase.UnprocessableEntity() ControllerBase.UnprocessableEntity(object) ControllerBase.UnprocessableEntity(ModelStateDictionary) ControllerBase.Conflict() ControllerBase.Conflict(object) ControllerBase.Conflict(ModelStateDictionary) ControllerBase.Problem(string, string, int?, string, string) ControllerBase.Problem(string, string, int?, string, string, IDictionary<string, object>) ControllerBase.ValidationProblem(ValidationProblemDetails) ControllerBase.ValidationProblem(ModelStateDictionary) ControllerBase.ValidationProblem() ControllerBase.ValidationProblem(string, string, int?, string, string, ModelStateDictionary) ControllerBase.ValidationProblem(string, string, int?, string, string, ModelStateDictionary, IDictionary<string, object>) ControllerBase.Created() ControllerBase.Created(string, object) ControllerBase.Created(Uri, object) ControllerBase.CreatedAtAction(string, object) ControllerBase.CreatedAtAction(string, object, object) ControllerBase.CreatedAtAction(string, string, object, object) ControllerBase.CreatedAtRoute(string, object) ControllerBase.CreatedAtRoute(object, object) ControllerBase.CreatedAtRoute(string, object, object) ControllerBase.Accepted() ControllerBase.Accepted(object) ControllerBase.Accepted(Uri) ControllerBase.Accepted(string) ControllerBase.Accepted(string, object) ControllerBase.Accepted(Uri, object) ControllerBase.AcceptedAtAction(string) ControllerBase.AcceptedAtAction(string, string) ControllerBase.AcceptedAtAction(string, object) ControllerBase.AcceptedAtAction(string, string, object) ControllerBase.AcceptedAtAction(string, object, object) ControllerBase.AcceptedAtAction(string, string, object, object) ControllerBase.AcceptedAtRoute(object) ControllerBase.AcceptedAtRoute(string) ControllerBase.AcceptedAtRoute(string, object) ControllerBase.AcceptedAtRoute(object, object) ControllerBase.AcceptedAtRoute(string, object, object) ControllerBase.Challenge() ControllerBase.Challenge(params string[]) ControllerBase.Challenge(AuthenticationProperties) ControllerBase.Challenge(AuthenticationProperties, params string[]) ControllerBase.Forbid() ControllerBase.Forbid(params string[]) ControllerBase.Forbid(AuthenticationProperties) ControllerBase.Forbid(AuthenticationProperties, params string[]) ControllerBase.SignIn(ClaimsPrincipal) ControllerBase.SignIn(ClaimsPrincipal, string) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties, string) ControllerBase.SignOut() ControllerBase.SignOut(AuthenticationProperties) ControllerBase.SignOut(params string[]) ControllerBase.SignOut(AuthenticationProperties, params string[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync(object, Type, string) ControllerBase.TryUpdateModelAsync(object, Type, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryValidateModel(object) ControllerBase.TryValidateModel(object, string) ControllerBase.HttpContext ControllerBase.Request ControllerBase.Response ControllerBase.RouteData ControllerBase.ModelState ControllerBase.ControllerContext ControllerBase.MetadataProvider ControllerBase.ModelBinderFactory ControllerBase.Url ControllerBase.ObjectValidator ControllerBase.ProblemDetailsFactory ControllerBase.User ControllerBase.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors RisksController(IRisksRepository) public RisksController(IRisksRepository repo) Parameters repo IRisksRepository Methods DeleteEnvironmentalRisk(int) Removes the EnvironmentalRisks with the matching ID from the database if the user has the required authorisation. [HttpDelete(\"DeleteEnvironmentalRisk/{id}\")] [ServiceFilter(typeof(UserAuthenticationFilter))] public Task<ActionResult> DeleteEnvironmentalRisk(int id) Parameters id int The ID of the EnvironmentalRisks to be deleted. Returns Task<ActionResult> A status code depending on the results of the deletion. DeleteInterpersonalRisk(int) Removes the InterpersonalRisks with the matching ID from the database if the user has the required authorisation. [HttpDelete(\"DeleteInterpersonalRisk/{id}\")] [ServiceFilter(typeof(UserAuthenticationFilter))] public Task<ActionResult> DeleteInterpersonalRisk(int id) Parameters id int The ID of the InterpersonalRisks to be deleted. Returns Task<ActionResult> A status code depending on the results of the deletion. DeletePersonalRisk(int) Removes the PersonalRisks with the matching ID from the database if the user has the required authorisation. [HttpDelete(\"DeletePersonalRisk/{id}\")] [ServiceFilter(typeof(UserAuthenticationFilter))] public Task<ActionResult> DeletePersonalRisk(int id) Parameters id int The ID of the PersonalRisks to be deleted. Returns Task<ActionResult> A status code depending on the results of the deletion. DeleteProjectRisk(int) Removes the ProjectRisks with the matching ID from the database if the user has the required authorisation. [HttpDelete(\"DeleteProjectRisk/{id}\")] [ServiceFilter(typeof(UserAuthenticationFilter))] public Task<ActionResult> DeleteProjectRisk(int id) Parameters id int The ID of the ProjectRisks to be deleted. Returns Task<ActionResult> A status code depending on the results of the deletion. GetEnvironmentalRisk(int) Gets the EnvironmentalRisks with the matching ID if the user has the required authorisation. [HttpGet(\"GetEnvironmentalRisk/{id}\")] [ServiceFilter(typeof(UserAuthenticationFilter))] public Task<ActionResult<EnvironmentalRisks>> GetEnvironmentalRisk(int id) Parameters id int The ID of the EnvironmentalRisks. Returns Task<ActionResult<EnvironmentalRisks>> The EnvironmentalRisks with the matching ID, or a 404 Not Found status code. GetEnvironmentalRiskByStakeholder(int) Gets the EnvironmentalRisks associated with the suppled StakeholderID if the user has the required authorisation. [HttpGet(\"GetEnvironmentalRiskByStakeholder/{id}\")] [ServiceFilter(typeof(UserAuthenticationFilter))] public Task<ActionResult<EnvironmentalRisks>> GetEnvironmentalRiskByStakeholder(int id) Parameters id int The ID of the Stakeholder Returns Task<ActionResult<EnvironmentalRisks>> The EnvironmentalRisks associated with the Stakeholder, or a 404 Not Found status code. GetInterpersonalRisk(int) Gets the InterpersonalRisks with the matching ID if the user has the required authorisation. [HttpGet(\"GetInterpersonalRisk/{id}\")] [ServiceFilter(typeof(UserAuthenticationFilter))] public Task<ActionResult<InterpersonalRisks>> GetInterpersonalRisk(int id) Parameters id int The ID of the InterpersonalRisks. Returns Task<ActionResult<InterpersonalRisks>> The InterpersonalRisks with the matching ID, or a 404 Not Found status code. GetInterpersonalRiskByStakeholder(int) Gets the InterpersonalRisks associated with the suppled StakeholderID if the user has the required authorisation. [HttpGet(\"GetInterpersonalRiskByStakeholder/{id}\")] [ServiceFilter(typeof(UserAuthenticationFilter))] public Task<ActionResult<InterpersonalRisks>> GetInterpersonalRiskByStakeholder(int id) Parameters id int The ID of the Stakeholder Returns Task<ActionResult<InterpersonalRisks>> The InterpersonalRisks associated with the Stakeholder, or a 404 Not Found status code. GetPersonalRisk(int) Gets the PersonalRisks with the matching ID if the user has the required authorisation. [HttpGet(\"GetPersonalRisk/{id}\")] [ServiceFilter(typeof(UserAuthenticationFilter))] public Task<ActionResult<PersonalRisks>> GetPersonalRisk(int id) Parameters id int The ID of the PersonalRisks. Returns Task<ActionResult<PersonalRisks>> The PersonalRisks with the matching ID, or a 404 Not Found status code. GetPersonalRiskByStakeholder(int) Gets the PersonalRisks associated with the suppled StakeholderID if the user has the required authorisation. [HttpGet(\"GetPersonalRiskByStakeholder/{id}\")] [ServiceFilter(typeof(UserAuthenticationFilter))] public Task<ActionResult<PersonalRisks>> GetPersonalRiskByStakeholder(int id) Parameters id int The ID of the Stakeholder Returns Task<ActionResult<PersonalRisks>> The PersonalRisks associated with the Stakeholder, or a 404 Not Found status code. GetProjectRisk(int) Gets the ProjectRisks with the matching ID if the user has the required authorisation. [HttpGet(\"GetProjectRisk/{id}\")] [ServiceFilter(typeof(UserAuthenticationFilter))] public Task<ActionResult<ProjectRisks>> GetProjectRisk(int id) Parameters id int The ID of the ProjectRisks. Returns Task<ActionResult<ProjectRisks>> The ProjectRisks with the matching ID, or a 404 Not Found status code. GetProjectRisksByProjectID(int) Gets the ProjectRisks associated with the suppled ProjectID if the user has the required authorisation. [HttpGet(\"GetProjectRisksByProjectID/{id}\")] [ServiceFilter(typeof(UserAuthenticationFilter))] public Task<ActionResult<ProjectRisks>> GetProjectRisksByProjectID(int id) Parameters id int The ID of the Project Returns Task<ActionResult<ProjectRisks>> The ProjectRisks associated with the Project, or a 404 Not Found status code. GetStakeholderRisksByStakeholder(int) Gets the EnvironmentalRisks, InterpersonalRisks, and PersonalRisks associated with the supplied StakeholderID if the user has the required authorisation. [HttpGet(\"GetStakeholderRisksByStakeholder/{id}\")] [ServiceFilter(typeof(UserAuthenticationFilter))] public Task<ActionResult<StakeholderRisksDTO>> GetStakeholderRisksByStakeholder(int id) Parameters id int The ID of the Stakeholder Returns Task<ActionResult<StakeholderRisksDTO>> The EnvironmentalRisks, InterpersonalRisks, and PersonalRisks associated with the StakeholderID, or a 404 Not Found status code. PostEnvironmentalRisk(EnvironmentalRisksDTO) Creates a new EnvironmentalRisks with values supplied in the EnvironmentalRisksDTO if the user has the required authorisation. [HttpPost(\"PostEnvironmentalRisk\")] [ServiceFilter(typeof(UserAuthenticationFilter))] public Task<ActionResult<EnvironmentalRisks>> PostEnvironmentalRisk(EnvironmentalRisksDTO envRisk) Parameters envRisk EnvironmentalRisksDTO The EnvironmentalRisksDTO that will be used to create the EnvironmentalRisks Returns Task<ActionResult<EnvironmentalRisks>> The newly created EnvironmentalRisks PostInterpersonalRisk(InterpersonalRisksDTO) Creates a new InterpersonalRisks with values supplied in the InterpersonalRisksDTO if the user has the required authorisation. [HttpPost(\"PostInterpersonalRisk\")] [ServiceFilter(typeof(UserAuthenticationFilter))] public Task<ActionResult<InterpersonalRisks>> PostInterpersonalRisk(InterpersonalRisksDTO interRisk) Parameters interRisk InterpersonalRisksDTO The InterpersonalRisksDTO that will be used to create the InterpersonalRisks Returns Task<ActionResult<InterpersonalRisks>> The newly created InterpersonalRisks PostPersonalRisk(PersonalRisksDTO) Creates a new PersonalRisks with values supplied in the PersonalRisksDTO if the user has the required authorisation. [HttpPost(\"PostPersonalRisk\")] [ServiceFilter(typeof(UserAuthenticationFilter))] public Task<ActionResult<PersonalRisks>> PostPersonalRisk(PersonalRisksDTO personRisk) Parameters personRisk PersonalRisksDTO The PersonalRisksDTO that will be used to create the PersonalRisks Returns Task<ActionResult<PersonalRisks>> The newly created PersonalRisks PostProjectRisk(ProjectRisksDTO) Creates a new ProjectRisks with values supplied in the ProjectRisksDTO if the user has the required authorisation. [HttpPost(\"PostProjectRisk\")] [ServiceFilter(typeof(UserAuthenticationFilter))] public Task<ActionResult<ProjectRisks>> PostProjectRisk(ProjectRisksDTO projectRisk) Parameters projectRisk ProjectRisksDTO The ProjectRisksDTO that will be used to create the ProjectRisks Returns Task<ActionResult<ProjectRisks>> The newly created ProjectRisks PutEnvironmentalRisk(int, EnvironmentalRisks) Updates the EnvironmentalRisks with the supplied ID with the new EnvironmentalRisks if the user has the required authorisation. [HttpPut(\"PutEnvironmentalRisk/{id}\")] [ServiceFilter(typeof(UserAuthenticationFilter))] public Task<IActionResult> PutEnvironmentalRisk(int id, EnvironmentalRisks environmentalRisk) Parameters id int The ID of the EnvironmentalRisks that will be replaced. environmentalRisk EnvironmentalRisks The new EnvironmentalRisks that will replace the existing one Returns Task<IActionResult> A status code depending on the results of the update. PutInterpersonalRisk(int, InterpersonalRisks) Updates the InterpersonalRisks with the supplied ID with the new InterpersonalRisks if the user has the required authorisation. [HttpPut(\"PutInterpersonalRisk/{id}\")] [ServiceFilter(typeof(UserAuthenticationFilter))] public Task<IActionResult> PutInterpersonalRisk(int id, InterpersonalRisks interpersonalRisk) Parameters id int The ID of the InterpersonalRisks that will be replaced. interpersonalRisk InterpersonalRisks The new InterpersonalRisks that will replace the existing one Returns Task<IActionResult> A status code depending on the results of the update. PutPersonalRisk(int, PersonalRisks) Updates the PersonalRisks with the supplied ID with the new PersonalRisks if the user has the required authorisation. [HttpPut(\"PutPersonalRisk/{id}\")] [ServiceFilter(typeof(UserAuthenticationFilter))] public Task<IActionResult> PutPersonalRisk(int id, PersonalRisks personalRisk) Parameters id int The ID of the PersonalRisks that will be replaced. personalRisk PersonalRisks The new PersonalRisks that will replace the existing one Returns Task<IActionResult> A status code depending on the results of the update. PutProjectRisk(int, ProjectRisks) Updates the PutProjectRisk with the supplied ID with the new PutProjectRisk if the user has the required authorisation. [HttpPut(\"PutProjectRisk/{id}\")] [ServiceFilter(typeof(UserAuthenticationFilter))] public Task<ActionResult> PutProjectRisk(int id, ProjectRisks projectRisk) Parameters id int The ID of the PutProjectRisk that will be replaced. projectRisk ProjectRisks The new PutProjectRisk that will replace the existing one Returns Task<ActionResult> A status code depending on the results of the update."
  },
  "api/T217_Capstone_Project_API.Controllers.StakeholdersController.html": {
    "href": "api/T217_Capstone_Project_API.Controllers.StakeholdersController.html",
    "title": "Class StakeholdersController | StakeholderRisks",
    "summary": "Class StakeholdersController Namespace T217_Capstone_Project_API.Controllers Assembly T217 Capstone Project API.dll API endpoint controller that manages all endpoints related to Stakeholders. [Route(\"api/[controller]\")] [ApiController] public class StakeholdersController : ControllerBase Inheritance object ControllerBase StakeholdersController Inherited Members ControllerBase.StatusCode(int) ControllerBase.StatusCode(int, object) ControllerBase.Content(string) ControllerBase.Content(string, string) ControllerBase.Content(string, string, Encoding) ControllerBase.Content(string, MediaTypeHeaderValue) ControllerBase.NoContent() ControllerBase.Ok() ControllerBase.Ok(object) ControllerBase.Redirect(string) ControllerBase.RedirectPermanent(string) ControllerBase.RedirectPreserveMethod(string) ControllerBase.RedirectPermanentPreserveMethod(string) ControllerBase.LocalRedirect(string) ControllerBase.LocalRedirectPermanent(string) ControllerBase.LocalRedirectPreserveMethod(string) ControllerBase.LocalRedirectPermanentPreserveMethod(string) ControllerBase.RedirectToAction() ControllerBase.RedirectToAction(string) ControllerBase.RedirectToAction(string, object) ControllerBase.RedirectToAction(string, string) ControllerBase.RedirectToAction(string, string, object) ControllerBase.RedirectToAction(string, string, string) ControllerBase.RedirectToAction(string, string, object, string) ControllerBase.RedirectToActionPreserveMethod(string, string, object, string) ControllerBase.RedirectToActionPermanent(string) ControllerBase.RedirectToActionPermanent(string, object) ControllerBase.RedirectToActionPermanent(string, string) ControllerBase.RedirectToActionPermanent(string, string, string) ControllerBase.RedirectToActionPermanent(string, string, object) ControllerBase.RedirectToActionPermanent(string, string, object, string) ControllerBase.RedirectToActionPermanentPreserveMethod(string, string, object, string) ControllerBase.RedirectToRoute(string) ControllerBase.RedirectToRoute(object) ControllerBase.RedirectToRoute(string, object) ControllerBase.RedirectToRoute(string, string) ControllerBase.RedirectToRoute(string, object, string) ControllerBase.RedirectToRoutePreserveMethod(string, object, string) ControllerBase.RedirectToRoutePermanent(string) ControllerBase.RedirectToRoutePermanent(object) ControllerBase.RedirectToRoutePermanent(string, object) ControllerBase.RedirectToRoutePermanent(string, string) ControllerBase.RedirectToRoutePermanent(string, object, string) ControllerBase.RedirectToRoutePermanentPreserveMethod(string, object, string) ControllerBase.RedirectToPage(string) ControllerBase.RedirectToPage(string, object) ControllerBase.RedirectToPage(string, string) ControllerBase.RedirectToPage(string, string, object) ControllerBase.RedirectToPage(string, string, string) ControllerBase.RedirectToPage(string, string, object, string) ControllerBase.RedirectToPagePermanent(string) ControllerBase.RedirectToPagePermanent(string, object) ControllerBase.RedirectToPagePermanent(string, string) ControllerBase.RedirectToPagePermanent(string, string, string) ControllerBase.RedirectToPagePermanent(string, string, object, string) ControllerBase.RedirectToPagePreserveMethod(string, string, object, string) ControllerBase.RedirectToPagePermanentPreserveMethod(string, string, object, string) ControllerBase.File(byte[], string) ControllerBase.File(byte[], string, bool) ControllerBase.File(byte[], string, string) ControllerBase.File(byte[], string, string, bool) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string) ControllerBase.File(Stream, string, bool) ControllerBase.File(Stream, string, string) ControllerBase.File(Stream, string, string, bool) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string) ControllerBase.File(string, string, bool) ControllerBase.File(string, string, string) ControllerBase.File(string, string, string, bool) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string) ControllerBase.PhysicalFile(string, string, bool) ControllerBase.PhysicalFile(string, string, string) ControllerBase.PhysicalFile(string, string, string, bool) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.Unauthorized() ControllerBase.Unauthorized(object) ControllerBase.NotFound() ControllerBase.NotFound(object) ControllerBase.BadRequest() ControllerBase.BadRequest(object) ControllerBase.BadRequest(ModelStateDictionary) ControllerBase.UnprocessableEntity() ControllerBase.UnprocessableEntity(object) ControllerBase.UnprocessableEntity(ModelStateDictionary) ControllerBase.Conflict() ControllerBase.Conflict(object) ControllerBase.Conflict(ModelStateDictionary) ControllerBase.Problem(string, string, int?, string, string) ControllerBase.Problem(string, string, int?, string, string, IDictionary<string, object>) ControllerBase.ValidationProblem(ValidationProblemDetails) ControllerBase.ValidationProblem(ModelStateDictionary) ControllerBase.ValidationProblem() ControllerBase.ValidationProblem(string, string, int?, string, string, ModelStateDictionary) ControllerBase.ValidationProblem(string, string, int?, string, string, ModelStateDictionary, IDictionary<string, object>) ControllerBase.Created() ControllerBase.Created(string, object) ControllerBase.Created(Uri, object) ControllerBase.CreatedAtAction(string, object) ControllerBase.CreatedAtAction(string, object, object) ControllerBase.CreatedAtAction(string, string, object, object) ControllerBase.CreatedAtRoute(string, object) ControllerBase.CreatedAtRoute(object, object) ControllerBase.CreatedAtRoute(string, object, object) ControllerBase.Accepted() ControllerBase.Accepted(object) ControllerBase.Accepted(Uri) ControllerBase.Accepted(string) ControllerBase.Accepted(string, object) ControllerBase.Accepted(Uri, object) ControllerBase.AcceptedAtAction(string) ControllerBase.AcceptedAtAction(string, string) ControllerBase.AcceptedAtAction(string, object) ControllerBase.AcceptedAtAction(string, string, object) ControllerBase.AcceptedAtAction(string, object, object) ControllerBase.AcceptedAtAction(string, string, object, object) ControllerBase.AcceptedAtRoute(object) ControllerBase.AcceptedAtRoute(string) ControllerBase.AcceptedAtRoute(string, object) ControllerBase.AcceptedAtRoute(object, object) ControllerBase.AcceptedAtRoute(string, object, object) ControllerBase.Challenge() ControllerBase.Challenge(params string[]) ControllerBase.Challenge(AuthenticationProperties) ControllerBase.Challenge(AuthenticationProperties, params string[]) ControllerBase.Forbid() ControllerBase.Forbid(params string[]) ControllerBase.Forbid(AuthenticationProperties) ControllerBase.Forbid(AuthenticationProperties, params string[]) ControllerBase.SignIn(ClaimsPrincipal) ControllerBase.SignIn(ClaimsPrincipal, string) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties, string) ControllerBase.SignOut() ControllerBase.SignOut(AuthenticationProperties) ControllerBase.SignOut(params string[]) ControllerBase.SignOut(AuthenticationProperties, params string[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync(object, Type, string) ControllerBase.TryUpdateModelAsync(object, Type, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryValidateModel(object) ControllerBase.TryValidateModel(object, string) ControllerBase.HttpContext ControllerBase.Request ControllerBase.Response ControllerBase.RouteData ControllerBase.ModelState ControllerBase.ControllerContext ControllerBase.MetadataProvider ControllerBase.ModelBinderFactory ControllerBase.Url ControllerBase.ObjectValidator ControllerBase.ProblemDetailsFactory ControllerBase.User ControllerBase.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors StakeholdersController(IStakeholderRepository) public StakeholdersController(IStakeholderRepository repo) Parameters repo IStakeholderRepository Methods DeleteStakeholder(int) Removes the Stakeholder with the matching ID from the database if the user has the required authorisation. [HttpDelete(\"{id}\")] [ServiceFilter(typeof(UserAuthenticationFilter))] public Task<IActionResult> DeleteStakeholder(int id) Parameters id int The ID of the Stakeholder to be deleted. Returns Task<IActionResult> A status code depending on the results of the deletion. GetStakeholder(int) Gets the Stakeholder with the associated ID, and returns it if the user has the required authorisation. [HttpGet(\"{id}\")] [ServiceFilter(typeof(UserAuthenticationFilter))] public Task<ActionResult<Stakeholder>> GetStakeholder(int id) Parameters id int The ID of the desired Stakeholder. Returns Task<ActionResult<Stakeholder>> The Stakeholder with the matching ID, or a 404 Not Found status code. GetStakeholderByProjectID(int) Gets a list of Stakeholders associated with the ProjectID, and returns it if the user has the required authorisation. [HttpGet(\"GetByProjectID\")] [ServiceFilter(typeof(UserAuthenticationFilter))] public Task<ActionResult<IEnumerable<Stakeholder>>> GetStakeholderByProjectID(int projectId) Parameters projectId int The ID of the associated Project. Returns Task<ActionResult<IEnumerable<Stakeholder>>> The list of Stakeholders associated with the ProjectID, or a 404 Not Found status code. GetStakeholders() Gets a list of all the Stakeholders that the user associated with the included API Key in the header has access to read. [HttpGet] [ServiceFilter(typeof(UserAuthenticationFilter))] public Task<ActionResult<IEnumerable<Stakeholder>>> GetStakeholders() Returns Task<ActionResult<IEnumerable<Stakeholder>>> An list of the Stakeholders the user has access to, or a 404 Not Found status code. PostStakeholder(StakeholderDTO) Creates a new Stakeholder with the values supplied in the StakeholderDTO. [HttpPost] [ServiceFilter(typeof(UserAuthenticationFilter))] public Task<ActionResult<Stakeholder>> PostStakeholder(StakeholderDTO stakeholder) Parameters stakeholder StakeholderDTO The StakeholderDTO to be created. Returns Task<ActionResult<Stakeholder>> The newly created Stakeholder. PutStakeholder(int, Stakeholder) Updates the Stakeholder with the supplied ID with the new Stakeholder if the user has the required authorisation. The ID must match the StakeholderID of the supplied Stakeholder. [HttpPut(\"{id}\")] [ServiceFilter(typeof(UserAuthenticationFilter))] public Task<IActionResult> PutStakeholder(int id, Stakeholder stakeholder) Parameters id int The ID of the Stakeholder to be updated. stakeholder Stakeholder The new Stakeholder that will replace the existing one. Returns Task<IActionResult> A status code depending on the results of the update."
  },
  "api/T217_Capstone_Project_API.Controllers.UsersController.html": {
    "href": "api/T217_Capstone_Project_API.Controllers.UsersController.html",
    "title": "Class UsersController | StakeholderRisks",
    "summary": "Class UsersController Namespace T217_Capstone_Project_API.Controllers Assembly T217 Capstone Project API.dll API endpoint controller that manages all endpoints related to Users. [Route(\"api/[controller]\")] [ApiController] public class UsersController : ControllerBase Inheritance object ControllerBase UsersController Inherited Members ControllerBase.StatusCode(int) ControllerBase.StatusCode(int, object) ControllerBase.Content(string) ControllerBase.Content(string, string) ControllerBase.Content(string, string, Encoding) ControllerBase.Content(string, MediaTypeHeaderValue) ControllerBase.NoContent() ControllerBase.Ok() ControllerBase.Ok(object) ControllerBase.Redirect(string) ControllerBase.RedirectPermanent(string) ControllerBase.RedirectPreserveMethod(string) ControllerBase.RedirectPermanentPreserveMethod(string) ControllerBase.LocalRedirect(string) ControllerBase.LocalRedirectPermanent(string) ControllerBase.LocalRedirectPreserveMethod(string) ControllerBase.LocalRedirectPermanentPreserveMethod(string) ControllerBase.RedirectToAction() ControllerBase.RedirectToAction(string) ControllerBase.RedirectToAction(string, object) ControllerBase.RedirectToAction(string, string) ControllerBase.RedirectToAction(string, string, object) ControllerBase.RedirectToAction(string, string, string) ControllerBase.RedirectToAction(string, string, object, string) ControllerBase.RedirectToActionPreserveMethod(string, string, object, string) ControllerBase.RedirectToActionPermanent(string) ControllerBase.RedirectToActionPermanent(string, object) ControllerBase.RedirectToActionPermanent(string, string) ControllerBase.RedirectToActionPermanent(string, string, string) ControllerBase.RedirectToActionPermanent(string, string, object) ControllerBase.RedirectToActionPermanent(string, string, object, string) ControllerBase.RedirectToActionPermanentPreserveMethod(string, string, object, string) ControllerBase.RedirectToRoute(string) ControllerBase.RedirectToRoute(object) ControllerBase.RedirectToRoute(string, object) ControllerBase.RedirectToRoute(string, string) ControllerBase.RedirectToRoute(string, object, string) ControllerBase.RedirectToRoutePreserveMethod(string, object, string) ControllerBase.RedirectToRoutePermanent(string) ControllerBase.RedirectToRoutePermanent(object) ControllerBase.RedirectToRoutePermanent(string, object) ControllerBase.RedirectToRoutePermanent(string, string) ControllerBase.RedirectToRoutePermanent(string, object, string) ControllerBase.RedirectToRoutePermanentPreserveMethod(string, object, string) ControllerBase.RedirectToPage(string) ControllerBase.RedirectToPage(string, object) ControllerBase.RedirectToPage(string, string) ControllerBase.RedirectToPage(string, string, object) ControllerBase.RedirectToPage(string, string, string) ControllerBase.RedirectToPage(string, string, object, string) ControllerBase.RedirectToPagePermanent(string) ControllerBase.RedirectToPagePermanent(string, object) ControllerBase.RedirectToPagePermanent(string, string) ControllerBase.RedirectToPagePermanent(string, string, string) ControllerBase.RedirectToPagePermanent(string, string, object, string) ControllerBase.RedirectToPagePreserveMethod(string, string, object, string) ControllerBase.RedirectToPagePermanentPreserveMethod(string, string, object, string) ControllerBase.File(byte[], string) ControllerBase.File(byte[], string, bool) ControllerBase.File(byte[], string, string) ControllerBase.File(byte[], string, string, bool) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string) ControllerBase.File(Stream, string, bool) ControllerBase.File(Stream, string, string) ControllerBase.File(Stream, string, string, bool) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string) ControllerBase.File(string, string, bool) ControllerBase.File(string, string, string) ControllerBase.File(string, string, string, bool) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string) ControllerBase.PhysicalFile(string, string, bool) ControllerBase.PhysicalFile(string, string, string) ControllerBase.PhysicalFile(string, string, string, bool) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.Unauthorized() ControllerBase.Unauthorized(object) ControllerBase.NotFound() ControllerBase.NotFound(object) ControllerBase.BadRequest() ControllerBase.BadRequest(object) ControllerBase.BadRequest(ModelStateDictionary) ControllerBase.UnprocessableEntity() ControllerBase.UnprocessableEntity(object) ControllerBase.UnprocessableEntity(ModelStateDictionary) ControllerBase.Conflict() ControllerBase.Conflict(object) ControllerBase.Conflict(ModelStateDictionary) ControllerBase.Problem(string, string, int?, string, string) ControllerBase.Problem(string, string, int?, string, string, IDictionary<string, object>) ControllerBase.ValidationProblem(ValidationProblemDetails) ControllerBase.ValidationProblem(ModelStateDictionary) ControllerBase.ValidationProblem() ControllerBase.ValidationProblem(string, string, int?, string, string, ModelStateDictionary) ControllerBase.ValidationProblem(string, string, int?, string, string, ModelStateDictionary, IDictionary<string, object>) ControllerBase.Created() ControllerBase.Created(string, object) ControllerBase.Created(Uri, object) ControllerBase.CreatedAtAction(string, object) ControllerBase.CreatedAtAction(string, object, object) ControllerBase.CreatedAtAction(string, string, object, object) ControllerBase.CreatedAtRoute(string, object) ControllerBase.CreatedAtRoute(object, object) ControllerBase.CreatedAtRoute(string, object, object) ControllerBase.Accepted() ControllerBase.Accepted(object) ControllerBase.Accepted(Uri) ControllerBase.Accepted(string) ControllerBase.Accepted(string, object) ControllerBase.Accepted(Uri, object) ControllerBase.AcceptedAtAction(string) ControllerBase.AcceptedAtAction(string, string) ControllerBase.AcceptedAtAction(string, object) ControllerBase.AcceptedAtAction(string, string, object) ControllerBase.AcceptedAtAction(string, object, object) ControllerBase.AcceptedAtAction(string, string, object, object) ControllerBase.AcceptedAtRoute(object) ControllerBase.AcceptedAtRoute(string) ControllerBase.AcceptedAtRoute(string, object) ControllerBase.AcceptedAtRoute(object, object) ControllerBase.AcceptedAtRoute(string, object, object) ControllerBase.Challenge() ControllerBase.Challenge(params string[]) ControllerBase.Challenge(AuthenticationProperties) ControllerBase.Challenge(AuthenticationProperties, params string[]) ControllerBase.Forbid() ControllerBase.Forbid(params string[]) ControllerBase.Forbid(AuthenticationProperties) ControllerBase.Forbid(AuthenticationProperties, params string[]) ControllerBase.SignIn(ClaimsPrincipal) ControllerBase.SignIn(ClaimsPrincipal, string) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties, string) ControllerBase.SignOut() ControllerBase.SignOut(AuthenticationProperties) ControllerBase.SignOut(params string[]) ControllerBase.SignOut(AuthenticationProperties, params string[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync(object, Type, string) ControllerBase.TryUpdateModelAsync(object, Type, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryValidateModel(object) ControllerBase.TryValidateModel(object, string) ControllerBase.HttpContext ControllerBase.Request ControllerBase.Response ControllerBase.RouteData ControllerBase.ModelState ControllerBase.ControllerContext ControllerBase.MetadataProvider ControllerBase.ModelBinderFactory ControllerBase.Url ControllerBase.ObjectValidator ControllerBase.ProblemDetailsFactory ControllerBase.User ControllerBase.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors UsersController(IUserRepository) public UsersController(IUserRepository repo) Parameters repo IUserRepository Methods DeleteSelf() Deletes the User associated with the included API key. [HttpDelete] [ServiceFilter(typeof(UserAuthenticationFilter))] public Task<ActionResult> DeleteSelf() Returns Task<ActionResult> 204 No Content status code, or 404 Not Found status code if the User doesn't exist. GetApiKey(LoginDTO) Gets the API key associated with the User with the matching login details. [HttpPost(\"GetApiKey\")] [AllowAnonymous] public Task<ActionResult<string>> GetApiKey(LoginDTO login) Parameters login LoginDTO Returns Task<ActionResult<string>> The API key of the associated User. GetUserDetails() Returns the UserDetails of the User associated with the included API key. [HttpGet(\"GetUserDetails\")] [ServiceFilter(typeof(UserAuthenticationFilter))] public Task<ActionResult<UserDetailsDTO>> GetUserDetails() Returns Task<ActionResult<UserDetailsDTO>> The UserDetails of the User. PostUser(CreateUserDTO) Creates a new User with the supplied CreateUserDTO. Email must be unique. [HttpPost] [AllowAnonymous] public Task<ActionResult<User>> PostUser(CreateUserDTO user) Parameters user CreateUserDTO The User to be created. Returns Task<ActionResult<User>> A 201 Created status code, or a 409 Conflict status code if the email already exists. UpdateSelf(User) Replaces the User associated with the included API key with the new User. [HttpPut(\"UpdateSelf\")] [ServiceFilter(typeof(UserAuthenticationFilter))] public Task<IActionResult> UpdateSelf(User user) Parameters user User The User to replace the existing one. Returns Task<IActionResult> A status code depending on the results of the update."
  },
  "api/T217_Capstone_Project_API.Controllers.html": {
    "href": "api/T217_Capstone_Project_API.Controllers.html",
    "title": "Namespace T217_Capstone_Project_API.Controllers | StakeholderRisks",
    "summary": "Namespace T217_Capstone_Project_API.Controllers Classes ProjectUsersController API endpoint controller that manages all endpoints related to ProjectUsers. ProjectsController API endpoint controller that manages all endpoints related to Projects. RisksController API endpoint controller that manages all endpoints related to the Risks. StakeholdersController API endpoint controller that manages all endpoints related to Stakeholders. UsersController API endpoint controller that manages all endpoints related to Users."
  },
  "api/T217_Capstone_Project_API.Migrations.html": {
    "href": "api/T217_Capstone_Project_API.Migrations.html",
    "title": "Namespace T217_Capstone_Project_API.Migrations | StakeholderRisks",
    "summary": "Namespace T217_Capstone_Project_API.Migrations Classes initial A base class inherited by each EF Core migration."
  },
  "api/T217_Capstone_Project_API.Migrations.initial.html": {
    "href": "api/T217_Capstone_Project_API.Migrations.initial.html",
    "title": "Class initial | StakeholderRisks",
    "summary": "Class initial Namespace T217_Capstone_Project_API.Migrations Assembly T217 Capstone Project API.dll A base class inherited by each EF Core migration. [DbContext(typeof(StakeholderRisksContext))] [Migration(\"20250522200421_initial\")] public class initial : Migration Inheritance object Migration initial Inherited Members Migration.InitialDatabase Migration.TargetModel Migration.UpOperations Migration.DownOperations Migration.ActiveProvider object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks See Database migrations for more information and examples. Methods BuildTargetModel(ModelBuilder) Implemented to build the TargetModel. protected override void BuildTargetModel(ModelBuilder modelBuilder) Parameters modelBuilder ModelBuilder The ModelBuilder to use to build the model. Remarks See Database migrations for more information and examples. Down(MigrationBuilder) Builds the operations that will migrate the database 'down'. protected override void Down(MigrationBuilder migrationBuilder) Parameters migrationBuilder MigrationBuilder The MigrationBuilder that will build the operations. Remarks That is, builds the operations that will take the database from the state left in by this migration so that it returns to the state that it was in before this migration was applied. This method must be overridden in each class that inherits from Migration if both 'up' and 'down' migrations are to be supported. If it is not overridden, then calling it will throw and it will not be possible to migrate in the 'down' direction. See Database migrations for more information and examples. Up(MigrationBuilder) Builds the operations that will migrate the database 'up'. protected override void Up(MigrationBuilder migrationBuilder) Parameters migrationBuilder MigrationBuilder The MigrationBuilder that will build the operations. Remarks That is, builds the operations that will take the database from the state left in by the previous migration so that it is up-to-date with regard to this migration. This method must be overridden in each class that inherits from Migration. See Database migrations for more information and examples."
  },
  "api/T217_Capstone_Project_API.Models.DTO.ProjectDTOs.ProjectDTO.html": {
    "href": "api/T217_Capstone_Project_API.Models.DTO.ProjectDTOs.ProjectDTO.html",
    "title": "Class ProjectDTO | StakeholderRisks",
    "summary": "Class ProjectDTO Namespace T217_Capstone_Project_API.Models.DTO.ProjectDTOs Assembly T217 Capstone Project API.dll public class ProjectDTO Inheritance object ProjectDTO Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties ProjectDescription public string ProjectDescription { get; set; } Property Value string ProjectName public string ProjectName { get; set; } Property Value string ProjectStage public string ProjectStage { get; set; } Property Value string Status public string Status { get; set; } Property Value string"
  },
  "api/T217_Capstone_Project_API.Models.DTO.ProjectDTOs.StakeholderDTO.html": {
    "href": "api/T217_Capstone_Project_API.Models.DTO.ProjectDTOs.StakeholderDTO.html",
    "title": "Class StakeholderDTO | StakeholderRisks",
    "summary": "Class StakeholderDTO Namespace T217_Capstone_Project_API.Models.DTO.ProjectDTOs Assembly T217 Capstone Project API.dll public class StakeholderDTO Inheritance object StakeholderDTO Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties BlobID public int BlobID { get; set; } Property Value int CaFI public string CaFI { get; set; } Property Value string Description public string Description { get; set; } Property Value string ProjectID public int ProjectID { get; set; } Property Value int StakeholderName public string StakeholderName { get; set; } Property Value string"
  },
  "api/T217_Capstone_Project_API.Models.DTO.ProjectDTOs.html": {
    "href": "api/T217_Capstone_Project_API.Models.DTO.ProjectDTOs.html",
    "title": "Namespace T217_Capstone_Project_API.Models.DTO.ProjectDTOs | StakeholderRisks",
    "summary": "Namespace T217_Capstone_Project_API.Models.DTO.ProjectDTOs Classes ProjectDTO StakeholderDTO"
  },
  "api/T217_Capstone_Project_API.Models.DTO.ProjectUserPermissionsDTO.html": {
    "href": "api/T217_Capstone_Project_API.Models.DTO.ProjectUserPermissionsDTO.html",
    "title": "Class ProjectUserPermissionsDTO | StakeholderRisks",
    "summary": "Class ProjectUserPermissionsDTO Namespace T217_Capstone_Project_API.Models.DTO Assembly T217 Capstone Project API.dll public class ProjectUserPermissionsDTO Inheritance object ProjectUserPermissionsDTO Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties CanEdit public bool CanEdit { get; set; } Property Value bool CanRead public bool CanRead { get; set; } Property Value bool CanWrite public bool CanWrite { get; set; } Property Value bool"
  },
  "api/T217_Capstone_Project_API.Models.DTO.RisksDTOs.StakeholderRisksDTO.html": {
    "href": "api/T217_Capstone_Project_API.Models.DTO.RisksDTOs.StakeholderRisksDTO.html",
    "title": "Class StakeholderRisksDTO | StakeholderRisks",
    "summary": "Class StakeholderRisksDTO Namespace T217_Capstone_Project_API.Models.DTO.RisksDTOs Assembly T217 Capstone Project API.dll public class StakeholderRisksDTO Inheritance object StakeholderRisksDTO Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties BlobID public int BlobID { get; set; } Property Value int EnvironmentalRisk public EnvironmentalRisks EnvironmentalRisk { get; set; } Property Value EnvironmentalRisks InterpersonalRisk public InterpersonalRisks InterpersonalRisk { get; set; } Property Value InterpersonalRisks PersonalRisk public PersonalRisks PersonalRisk { get; set; } Property Value PersonalRisks"
  },
  "api/T217_Capstone_Project_API.Models.DTO.RisksDTOs.html": {
    "href": "api/T217_Capstone_Project_API.Models.DTO.RisksDTOs.html",
    "title": "Namespace T217_Capstone_Project_API.Models.DTO.RisksDTOs | StakeholderRisks",
    "summary": "Namespace T217_Capstone_Project_API.Models.DTO.RisksDTOs Classes StakeholderRisksDTO"
  },
  "api/T217_Capstone_Project_API.Models.DTO.UserDTOs.CreateUserDTO.html": {
    "href": "api/T217_Capstone_Project_API.Models.DTO.UserDTOs.CreateUserDTO.html",
    "title": "Class CreateUserDTO | StakeholderRisks",
    "summary": "Class CreateUserDTO Namespace T217_Capstone_Project_API.Models.DTO.UserDTOs Assembly T217 Capstone Project API.dll public class CreateUserDTO Inheritance object CreateUserDTO Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Password public string Password { get; set; } Property Value string UserEmail public string UserEmail { get; set; } Property Value string UserFirstName public string UserFirstName { get; set; } Property Value string UserLastName public string UserLastName { get; set; } Property Value string"
  },
  "api/T217_Capstone_Project_API.Models.DTO.UserDTOs.LoginDTO.html": {
    "href": "api/T217_Capstone_Project_API.Models.DTO.UserDTOs.LoginDTO.html",
    "title": "Class LoginDTO | StakeholderRisks",
    "summary": "Class LoginDTO Namespace T217_Capstone_Project_API.Models.DTO.UserDTOs Assembly T217 Capstone Project API.dll public class LoginDTO Inheritance object LoginDTO Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Email public string Email { get; set; } Property Value string Password public string Password { get; set; } Property Value string"
  },
  "api/T217_Capstone_Project_API.Models.DTO.UserDTOs.UserDetailsDTO.html": {
    "href": "api/T217_Capstone_Project_API.Models.DTO.UserDTOs.UserDetailsDTO.html",
    "title": "Class UserDetailsDTO | StakeholderRisks",
    "summary": "Class UserDetailsDTO Namespace T217_Capstone_Project_API.Models.DTO.UserDTOs Assembly T217 Capstone Project API.dll public class UserDetailsDTO Inheritance object UserDetailsDTO Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors UserDetailsDTO(string, string, string) public UserDetailsDTO(string userEmail, string userFirstName, string userLastName) Parameters userEmail string userFirstName string userLastName string Properties UserEmail public string UserEmail { get; set; } Property Value string UserFirstName public string UserFirstName { get; set; } Property Value string UserLastName public string UserLastName { get; set; } Property Value string"
  },
  "api/T217_Capstone_Project_API.Models.DTO.UserDTOs.html": {
    "href": "api/T217_Capstone_Project_API.Models.DTO.UserDTOs.html",
    "title": "Namespace T217_Capstone_Project_API.Models.DTO.UserDTOs | StakeholderRisks",
    "summary": "Namespace T217_Capstone_Project_API.Models.DTO.UserDTOs Classes CreateUserDTO LoginDTO UserDetailsDTO"
  },
  "api/T217_Capstone_Project_API.Models.DTO.html": {
    "href": "api/T217_Capstone_Project_API.Models.DTO.html",
    "title": "Namespace T217_Capstone_Project_API.Models.DTO | StakeholderRisks",
    "summary": "Namespace T217_Capstone_Project_API.Models.DTO Classes ProjectUserPermissionsDTO"
  },
  "api/T217_Capstone_Project_API.Models.Projects.Project.html": {
    "href": "api/T217_Capstone_Project_API.Models.Projects.Project.html",
    "title": "Class Project | StakeholderRisks",
    "summary": "Class Project Namespace T217_Capstone_Project_API.Models.Projects Assembly T217 Capstone Project API.dll public class Project Inheritance object Project Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties CreatedDateTime [Required] public DateTime CreatedDateTime { get; set; } Property Value DateTime EditDateTime [Required] public DateTime EditDateTime { get; set; } Property Value DateTime ProjectDescription [Required] public string ProjectDescription { get; set; } Property Value string ProjectID [Key] [DatabaseGenerated(DatabaseGeneratedOption.Identity)] [Required] public int ProjectID { get; set; } Property Value int ProjectName [Required] public string ProjectName { get; set; } Property Value string Status [Required] public string Status { get; set; } Property Value string"
  },
  "api/T217_Capstone_Project_API.Models.Projects.ProjectUser.html": {
    "href": "api/T217_Capstone_Project_API.Models.Projects.ProjectUser.html",
    "title": "Class ProjectUser | StakeholderRisks",
    "summary": "Class ProjectUser Namespace T217_Capstone_Project_API.Models.Projects Assembly T217 Capstone Project API.dll public class ProjectUser Inheritance object ProjectUser Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ProjectUser() public ProjectUser() ProjectUser(int, int, bool, bool, bool, bool) public ProjectUser(int userID, int projectID, bool canRead, bool canWrite, bool canEdit, bool isAdmin) Parameters userID int projectID int canRead bool canWrite bool canEdit bool isAdmin bool ProjectUser(int, int, int, bool, bool, bool, bool) public ProjectUser(int projectUserID, int userID, int projectID, bool canRead, bool canWrite, bool canEdit, bool isAdmin) Parameters projectUserID int userID int projectID int canRead bool canWrite bool canEdit bool isAdmin bool Properties CanEdit [Required] public bool CanEdit { get; set; } Property Value bool CanRead [Required] public bool CanRead { get; set; } Property Value bool CanWrite [Required] public bool CanWrite { get; set; } Property Value bool IsAdmin [Required] public bool IsAdmin { get; set; } Property Value bool Project [JsonIgnore] public Project? Project { get; set; } Property Value Project ProjectID [ForeignKey(\"ProjectID\")] [Required] public int ProjectID { get; set; } Property Value int ProjectUserID [Key] [DatabaseGenerated(DatabaseGeneratedOption.Identity)] [Required] public int ProjectUserID { get; set; } Property Value int User [Required] [JsonIgnore] public User User { get; set; } Property Value User UserID [ForeignKey(\"UserID\")] [Required] public int UserID { get; set; } Property Value int"
  },
  "api/T217_Capstone_Project_API.Models.Projects.Stakeholder.html": {
    "href": "api/T217_Capstone_Project_API.Models.Projects.Stakeholder.html",
    "title": "Class Stakeholder | StakeholderRisks",
    "summary": "Class Stakeholder Namespace T217_Capstone_Project_API.Models.Projects Assembly T217 Capstone Project API.dll public class Stakeholder Inheritance object Stakeholder Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties BlobID public int BlobID { get; set; } Property Value int CaFI public string CaFI { get; set; } Property Value string CreatedDateTime public DateTime CreatedDateTime { get; set; } Property Value DateTime Description public string Description { get; set; } Property Value string EditDateTime public DateTime EditDateTime { get; set; } Property Value DateTime Project [JsonIgnore] public Project? Project { get; set; } Property Value Project ProjectID [ForeignKey(\"ProjectID\")] [Required] public int ProjectID { get; set; } Property Value int StakeholderID [Key] [DatabaseGenerated(DatabaseGeneratedOption.Identity)] [Required] public int StakeholderID { get; set; } Property Value int StakeholderName [Required] public string StakeholderName { get; set; } Property Value string"
  },
  "api/T217_Capstone_Project_API.Models.Projects.html": {
    "href": "api/T217_Capstone_Project_API.Models.Projects.html",
    "title": "Namespace T217_Capstone_Project_API.Models.Projects | StakeholderRisks",
    "summary": "Namespace T217_Capstone_Project_API.Models.Projects Classes Project ProjectUser Stakeholder"
  },
  "api/T217_Capstone_Project_API.Models.Risks.EnvironmentalRisks.html": {
    "href": "api/T217_Capstone_Project_API.Models.Risks.EnvironmentalRisks.html",
    "title": "Class EnvironmentalRisks | StakeholderRisks",
    "summary": "Class EnvironmentalRisks Namespace T217_Capstone_Project_API.Models.Risks Assembly T217 Capstone Project API.dll public class EnvironmentalRisks Inheritance object EnvironmentalRisks Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties ChangeVolume public int ChangeVolume { get; set; } Property Value int Culture public int Culture { get; set; } Property Value int EnvironmentalRiskID [Key] [DatabaseGenerated(DatabaseGeneratedOption.Identity)] [Required] public int EnvironmentalRiskID { get; set; } Property Value int Industry public int Industry { get; set; } Property Value int Infrastructure public int Infrastructure { get; set; } Property Value int Location public int Location { get; set; } Property Value int OfficePolitics public int OfficePolitics { get; set; } Property Value int Stakeholder [JsonIgnore] public Stakeholder? Stakeholder { get; set; } Property Value Stakeholder StakeholderID [ForeignKey(\"StakeholderID\")] [Required] public int StakeholderID { get; set; } Property Value int"
  },
  "api/T217_Capstone_Project_API.Models.Risks.EnvironmentalRisksDTO.html": {
    "href": "api/T217_Capstone_Project_API.Models.Risks.EnvironmentalRisksDTO.html",
    "title": "Class EnvironmentalRisksDTO | StakeholderRisks",
    "summary": "Class EnvironmentalRisksDTO Namespace T217_Capstone_Project_API.Models.Risks Assembly T217 Capstone Project API.dll public class EnvironmentalRisksDTO Inheritance object EnvironmentalRisksDTO Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties ChangeVolume public int ChangeVolume { get; set; } Property Value int Culture public int Culture { get; set; } Property Value int Industry public int Industry { get; set; } Property Value int Infrastructure public int Infrastructure { get; set; } Property Value int Location public int Location { get; set; } Property Value int OfficePolitics public int OfficePolitics { get; set; } Property Value int StakeholderID public int StakeholderID { get; set; } Property Value int"
  },
  "api/T217_Capstone_Project_API.Models.Risks.InterpersonalRisks.html": {
    "href": "api/T217_Capstone_Project_API.Models.Risks.InterpersonalRisks.html",
    "title": "Class InterpersonalRisks | StakeholderRisks",
    "summary": "Class InterpersonalRisks Namespace T217_Capstone_Project_API.Models.Risks Assembly T217 Capstone Project API.dll public class InterpersonalRisks Inheritance object InterpersonalRisks Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Communication public int Communication { get; set; } Property Value int InterpersonalRiskID [Key] [DatabaseGenerated(DatabaseGeneratedOption.Identity)] [Required] public int InterpersonalRiskID { get; set; } Property Value int Respect public int Respect { get; set; } Property Value int SharingSuccess public int SharingSuccess { get; set; } Property Value int Stakeholder [JsonIgnore] public Stakeholder? Stakeholder { get; set; } Property Value Stakeholder StakeholderID [ForeignKey(\"StakeholderID\")] [Required] public int StakeholderID { get; set; } Property Value int Support public int Support { get; set; } Property Value int SupportiveManagement public int SupportiveManagement { get; set; } Property Value int Trust public int Trust { get; set; } Property Value int"
  },
  "api/T217_Capstone_Project_API.Models.Risks.InterpersonalRisksDTO.html": {
    "href": "api/T217_Capstone_Project_API.Models.Risks.InterpersonalRisksDTO.html",
    "title": "Class InterpersonalRisksDTO | StakeholderRisks",
    "summary": "Class InterpersonalRisksDTO Namespace T217_Capstone_Project_API.Models.Risks Assembly T217 Capstone Project API.dll public class InterpersonalRisksDTO Inheritance object InterpersonalRisksDTO Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Communication public int Communication { get; set; } Property Value int Respect public int Respect { get; set; } Property Value int SharingSuccess public int SharingSuccess { get; set; } Property Value int StakeholderID public int StakeholderID { get; set; } Property Value int Support public int Support { get; set; } Property Value int SupportiveManagement public int SupportiveManagement { get; set; } Property Value int Trust public int Trust { get; set; } Property Value int"
  },
  "api/T217_Capstone_Project_API.Models.Risks.PersonalRisks.html": {
    "href": "api/T217_Capstone_Project_API.Models.Risks.PersonalRisks.html",
    "title": "Class PersonalRisks | StakeholderRisks",
    "summary": "Class PersonalRisks Namespace T217_Capstone_Project_API.Models.Risks Assembly T217 Capstone Project API.dll public class PersonalRisks Inheritance object PersonalRisks Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Age public int Age { get; set; } Property Value int EducationTraining public int EducationTraining { get; set; } Property Value int Experience public int Experience { get; set; } Property Value int History public int History { get; set; } Property Value int Impact public int Impact { get; set; } Property Value int Interest public int Interest { get; set; } Property Value int Involvement public int Involvement { get; set; } Property Value int Kpi public int Kpi { get; set; } Property Value int PersonalRiskID [Key] [DatabaseGenerated(DatabaseGeneratedOption.Identity)] [Required] public int PersonalRiskID { get; set; } Property Value int Personalities public int Personalities { get; set; } Property Value int PriorRole public int PriorRole { get; set; } Property Value int RoleType public int RoleType { get; set; } Property Value int ServiceLength public int ServiceLength { get; set; } Property Value int Stakeholder [JsonIgnore] public Stakeholder? Stakeholder { get; set; } Property Value Stakeholder StakeholderID [ForeignKey(\"StakeholderID\")] [Required] public int StakeholderID { get; set; } Property Value int Status public int Status { get; set; } Property Value int Workload public int Workload { get; set; } Property Value int"
  },
  "api/T217_Capstone_Project_API.Models.Risks.PersonalRisksDTO.html": {
    "href": "api/T217_Capstone_Project_API.Models.Risks.PersonalRisksDTO.html",
    "title": "Class PersonalRisksDTO | StakeholderRisks",
    "summary": "Class PersonalRisksDTO Namespace T217_Capstone_Project_API.Models.Risks Assembly T217 Capstone Project API.dll public class PersonalRisksDTO Inheritance object PersonalRisksDTO Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Age public int Age { get; set; } Property Value int EducationTraining public int EducationTraining { get; set; } Property Value int Experience public int Experience { get; set; } Property Value int History public int History { get; set; } Property Value int Impact public int Impact { get; set; } Property Value int Interest public int Interest { get; set; } Property Value int Involvement public int Involvement { get; set; } Property Value int Kpi public int Kpi { get; set; } Property Value int Personalities public int Personalities { get; set; } Property Value int PriorRole public int PriorRole { get; set; } Property Value int RoleType public int RoleType { get; set; } Property Value int ServiceLength public int ServiceLength { get; set; } Property Value int StakeholderID public int StakeholderID { get; set; } Property Value int Status public int Status { get; set; } Property Value int Workload public int Workload { get; set; } Property Value int"
  },
  "api/T217_Capstone_Project_API.Models.Risks.ProjectRisks.html": {
    "href": "api/T217_Capstone_Project_API.Models.Risks.ProjectRisks.html",
    "title": "Class ProjectRisks | StakeholderRisks",
    "summary": "Class ProjectRisks Namespace T217_Capstone_Project_API.Models.Risks Assembly T217 Capstone Project API.dll public class ProjectRisks Inheritance object ProjectRisks Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties CulturalAlignment public int CulturalAlignment { get; set; } Property Value int Priority public int Priority { get; set; } Property Value int Project [JsonIgnore] public Project? Project { get; set; } Property Value Project ProjectGoals public int ProjectGoals { get; set; } Property Value int ProjectID [ForeignKey(\"ProjectID\")] [Required] public int ProjectID { get; set; } Property Value int ProjectLength public int ProjectLength { get; set; } Property Value int ProjectRiskID [Key] [DatabaseGenerated(DatabaseGeneratedOption.Identity)] [Required] public int ProjectRiskID { get; set; } Property Value int Resourcing public int Resourcing { get; set; } Property Value int TypeOfChange public int TypeOfChange { get; set; } Property Value int"
  },
  "api/T217_Capstone_Project_API.Models.Risks.ProjectRisksDTO.html": {
    "href": "api/T217_Capstone_Project_API.Models.Risks.ProjectRisksDTO.html",
    "title": "Class ProjectRisksDTO | StakeholderRisks",
    "summary": "Class ProjectRisksDTO Namespace T217_Capstone_Project_API.Models.Risks Assembly T217 Capstone Project API.dll public class ProjectRisksDTO Inheritance object ProjectRisksDTO Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties CulturalAlignment public int CulturalAlignment { get; set; } Property Value int Priority public int Priority { get; set; } Property Value int ProjectGoals public int ProjectGoals { get; set; } Property Value int ProjectID public int ProjectID { get; set; } Property Value int ProjectLength public int ProjectLength { get; set; } Property Value int Resourcing public int Resourcing { get; set; } Property Value int TypeOfChange public int TypeOfChange { get; set; } Property Value int"
  },
  "api/T217_Capstone_Project_API.Models.Risks.html": {
    "href": "api/T217_Capstone_Project_API.Models.Risks.html",
    "title": "Namespace T217_Capstone_Project_API.Models.Risks | StakeholderRisks",
    "summary": "Namespace T217_Capstone_Project_API.Models.Risks Classes EnvironmentalRisks EnvironmentalRisksDTO InterpersonalRisks InterpersonalRisksDTO PersonalRisks PersonalRisksDTO ProjectRisks ProjectRisksDTO"
  },
  "api/T217_Capstone_Project_API.Models.User.html": {
    "href": "api/T217_Capstone_Project_API.Models.User.html",
    "title": "Class User | StakeholderRisks",
    "summary": "Class User Namespace T217_Capstone_Project_API.Models Assembly T217 Capstone Project API.dll public class User Inheritance object User Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties ApiKey [Required] public string ApiKey { get; set; } Property Value string Password [Required] public string Password { get; set; } Property Value string UserEmail [Required] public string UserEmail { get; set; } Property Value string UserFirstName [Required] public string UserFirstName { get; set; } Property Value string UserID [Key] [DatabaseGenerated(DatabaseGeneratedOption.Identity)] [Required] public int UserID { get; set; } Property Value int UserLastName [Required] public string UserLastName { get; set; } Property Value string"
  },
  "api/T217_Capstone_Project_API.Models.html": {
    "href": "api/T217_Capstone_Project_API.Models.html",
    "title": "Namespace T217_Capstone_Project_API.Models | StakeholderRisks",
    "summary": "Namespace T217_Capstone_Project_API.Models Classes User"
  },
  "api/T217_Capstone_Project_API.Program.html": {
    "href": "api/T217_Capstone_Project_API.Program.html",
    "title": "Class Program | StakeholderRisks",
    "summary": "Class Program Namespace T217_Capstone_Project_API Assembly T217 Capstone Project API.dll public class Program Inheritance object Program Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Main(string[]) public static void Main(string[] args) Parameters args string[]"
  },
  "api/T217_Capstone_Project_API.Repositories.Interfaces.IProjectRepository.html": {
    "href": "api/T217_Capstone_Project_API.Repositories.Interfaces.IProjectRepository.html",
    "title": "Interface IProjectRepository | StakeholderRisks",
    "summary": "Interface IProjectRepository Namespace T217_Capstone_Project_API.Repositories.Interfaces Assembly T217 Capstone Project API.dll Repository used to connect the application to the Projects table in the Database. public interface IProjectRepository Methods CreateProjectAsync(ProjectDTO, string) Creates a new Project and associated ProjectUser in the database. Task<Project> CreateProjectAsync(ProjectDTO project, string apiKey) Parameters project ProjectDTO The ProjectDTO to be added. apiKey string Returns Task<Project> DeleteProjectAsync(int, string) Deletes a Project from the database. Task<int> DeleteProjectAsync(int id, string apiKey) Parameters id int The ID of the Project to be deleted. apiKey string Returns Task<int> GetProjectAsync(int, string) Returns the Project from the database with the matching ID. Task<Project> GetProjectAsync(int id, string apiKey) Parameters id int The ID of the desired Project. apiKey string Returns Task<Project> GetProjectListAsync(string) Returns a list of all Projects from the database. Task<List<Project>> GetProjectListAsync(string apiKey) Parameters apiKey string Returns Task<List<Project>> UpdateProjectAsync(int, Project, string) Updates the Project with the matching ID with new values. Task<int> UpdateProjectAsync(int id, Project project, string apiKey) Parameters id int The ID of the project to be updated. project Project The replacement Project. apiKey string Returns Task<int>"
  },
  "api/T217_Capstone_Project_API.Repositories.Interfaces.IProjectUserRepository.html": {
    "href": "api/T217_Capstone_Project_API.Repositories.Interfaces.IProjectUserRepository.html",
    "title": "Interface IProjectUserRepository | StakeholderRisks",
    "summary": "Interface IProjectUserRepository Namespace T217_Capstone_Project_API.Repositories.Interfaces Assembly T217 Capstone Project API.dll Repository used to connect the application to the ProjectUsers table in the Database. public interface IProjectUserRepository Methods AddNewProjectUserAsync(int, int, string, ProjectUserPermissionsDTO) Creates a new ProjectUser for a User, associated with an existing Project. Task<ProjectUser> AddNewProjectUserAsync(int projectID, int newUserID, string apiKey, ProjectUserPermissionsDTO projectUserPermissions) Parameters projectID int The ID of the Project. newUserID int The ID of the User. apiKey string projectUserPermissions ProjectUserPermissionsDTO The permissions that the new ProjectUser will have. Returns Task<ProjectUser> CreateProjectUserAsync(ProjectUser) Creates a new ProjectUser. Task<ProjectUser> CreateProjectUserAsync(ProjectUser projectUser) Parameters projectUser ProjectUser The ProjectUser to be created. Returns Task<ProjectUser> The created ProjectUser. DeleteProjectUserAsync(int, string) Deletes the ProjectUser with the associated ID. Task<int> DeleteProjectUserAsync(int id, string apiKey) Parameters id int The ID of the ProjectUser. apiKey string Returns Task<int> GetProjectUserAsync(int) Returns the ProjectUser from the database with the matching ID. Task<ProjectUser> GetProjectUserAsync(int id) Parameters id int The ID of the ProjectUser Returns Task<ProjectUser> The ProjectUser with the matching ID. GetProjectUserByUserAndProjectAsync(int, int) Returns the ProjectUser associated with both the UserID and ProjectID. Task<ProjectUser> GetProjectUserByUserAndProjectAsync(int userId, int projectId) Parameters userId int The ID of the User. projectId int The ID of the Project. Returns Task<ProjectUser> The ProjectUser assocaited with both the UserID and ProjectID. GetProjectUserListAsync() Returns a list of ProjectUsers. Task<List<ProjectUser>> GetProjectUserListAsync() Returns Task<List<ProjectUser>> A list of ProjectUsers. GetProjectUserListByProjectAsync(int, string) Returns a list of ProjectUsers associated with teh ProjectID. Task<List<ProjectUser>> GetProjectUserListByProjectAsync(int id, string apiKey) Parameters id int The ID of the Project. apiKey string Returns Task<List<ProjectUser>> A list of ProjectUsers assoicated with the ProjectID.. GetProjectUserListByUserAsync(int) Returns a list of ProjectUsers associated with the UserID. Task<List<ProjectUser>> GetProjectUserListByUserAsync(int id) Parameters id int The ID of the User. Returns Task<List<ProjectUser>> A list of ProjectUsers associated with the UserID.. UpdateProjectUserAsync(int, string, ProjectUserPermissionsDTO) Updates the permissions of the ProjectUser with the associated ID. Task<int> UpdateProjectUserAsync(int id, string apiKey, ProjectUserPermissionsDTO projectUserPermissions) Parameters id int The ID of the ProjectUser. apiKey string projectUserPermissions ProjectUserPermissionsDTO The new permissions for the ProjectUser. Returns Task<int>"
  },
  "api/T217_Capstone_Project_API.Repositories.Interfaces.IRisksRepository.html": {
    "href": "api/T217_Capstone_Project_API.Repositories.Interfaces.IRisksRepository.html",
    "title": "Interface IRisksRepository | StakeholderRisks",
    "summary": "Interface IRisksRepository Namespace T217_Capstone_Project_API.Repositories.Interfaces Assembly T217 Capstone Project API.dll Repository used to connect the application to the Risks tables in the Database. public interface IRisksRepository Methods CreateEnvironmentalRiskAsync(EnvironmentalRisksDTO, string) Creates a new EnvironmentalRisks in the database. Task<EnvironmentalRisks> CreateEnvironmentalRiskAsync(EnvironmentalRisksDTO environmentalRisk, string apiKey) Parameters environmentalRisk EnvironmentalRisksDTO The EnvironmentalRisks to be added. apiKey string Returns Task<EnvironmentalRisks> CreateInterpersonalRiskAsync(InterpersonalRisksDTO, string) Creates a new InterpersonalRisks in the database. Task<InterpersonalRisks> CreateInterpersonalRiskAsync(InterpersonalRisksDTO interpersonalRisk, string apiKey) Parameters interpersonalRisk InterpersonalRisksDTO The InterpersonalRisks to be added. apiKey string Returns Task<InterpersonalRisks> CreatePersonalRiskAsync(PersonalRisksDTO, string) Creates a new PersonalRisks in the database. Task<PersonalRisks> CreatePersonalRiskAsync(PersonalRisksDTO personalRisk, string apiKey) Parameters personalRisk PersonalRisksDTO The PersonalRisks to be added. apiKey string Returns Task<PersonalRisks> CreateProjectRiskAsync(ProjectRisksDTO, string) Creates a new ProjectRisks in the database. Task<ProjectRisks> CreateProjectRiskAsync(ProjectRisksDTO projectRisk, string apiKey) Parameters projectRisk ProjectRisksDTO The ProjectRisks to be added. apiKey string Returns Task<ProjectRisks> DeleteEnvironmentalRiskAsync(int, string) Deletes a EnvironmentalRisks from the database. Task<int> DeleteEnvironmentalRiskAsync(int id, string apiKey) Parameters id int The ID of the EnvironmentalRisks to be deleted. apiKey string Returns Task<int> DeleteInterpersonalRiskAsync(int, string) Deletes a InterpersonalRisks from the database. Task<int> DeleteInterpersonalRiskAsync(int id, string apiKey) Parameters id int The ID of the InterpersonalRisks to be deleted. apiKey string Returns Task<int> DeletePersonalRiskAsync(int, string) Deletes a PersonalRisks from the database. Task<int> DeletePersonalRiskAsync(int id, string apiKey) Parameters id int The ID of the PersonalRisks to be deleted. apiKey string Returns Task<int> DeleteProjectRiskAsync(int, string) Deletes a ProjectRisks from the database. Task<int> DeleteProjectRiskAsync(int id, string apiKey) Parameters id int The ID of the ProjectRisks to be deleted. apiKey string Returns Task<int> GetEnvironmentalRiskAsync(int, string) Returns the EnvironmentalRisks from the database with the matching ID. Task<EnvironmentalRisks> GetEnvironmentalRiskAsync(int id, string apiKey) Parameters id int The ID of the desired EnvironmentalRisks. apiKey string Returns Task<EnvironmentalRisks> GetEnvironmentalRiskFromStakeholderAsync(int, string) Returns the EnvironmentalRisks from the database with the matching StakeholderID. Task<EnvironmentalRisks> GetEnvironmentalRiskFromStakeholderAsync(int stakeholderId, string apiKey) Parameters stakeholderId int apiKey string Returns Task<EnvironmentalRisks> GetInterpersonalRiskAsync(int, string) Returns the InterpersonalRisks from the database with the matching ID. Task<InterpersonalRisks> GetInterpersonalRiskAsync(int id, string apiKey) Parameters id int The ID of the desired InterpersonalRisks. apiKey string Returns Task<InterpersonalRisks> GetInterpersonalRiskFromStakeholderAsync(int, string) Returns the InterpersonalRisks from the database with the matching StakeholderID. Task<InterpersonalRisks> GetInterpersonalRiskFromStakeholderAsync(int stakeholderId, string apiKey) Parameters stakeholderId int apiKey string Returns Task<InterpersonalRisks> GetPersonalRiskAsync(int, string) Returns the PersonalRisks from the database with the matching ID. Task<PersonalRisks> GetPersonalRiskAsync(int id, string apiKey) Parameters id int The ID of the desired PersonalRisks. apiKey string Returns Task<PersonalRisks> GetPersonalRiskFromStakeholderAsync(int, string) Returns the PersonalRisks from the database with the matching StakeholderID. Task<PersonalRisks> GetPersonalRiskFromStakeholderAsync(int stakeholderId, string apiKey) Parameters stakeholderId int apiKey string Returns Task<PersonalRisks> GetProjectRiskAsync(int, string) Returns the ProjectRisks from the database with the matching ID. Task<ProjectRisks> GetProjectRiskAsync(int id, string apiKey) Parameters id int The ID of the desired ProjectRisks. apiKey string Returns Task<ProjectRisks> GetProjectRiskFromProjectAsync(int, string) Returns the ProjectRisks from the database with the matching ProjectID. Task<ProjectRisks> GetProjectRiskFromProjectAsync(int projectId, string apiKey) Parameters projectId int apiKey string Returns Task<ProjectRisks> UpdateEnvironmentalRiskAsync(int, EnvironmentalRisks, string) Updates the EnvironmentalRisks with the matching ID with new values. Task<int> UpdateEnvironmentalRiskAsync(int id, EnvironmentalRisks environmentalRisk, string apiKey) Parameters id int The ID of the EnvironmentalRisks to be updated. environmentalRisk EnvironmentalRisks The replacement EnvironmentalRisks. apiKey string Returns Task<int> UpdateInterpersonalRiskAsync(int, InterpersonalRisks, string) Updates the InterpersonalRisks with the matching ID with new values. Task<int> UpdateInterpersonalRiskAsync(int id, InterpersonalRisks interpersonalRisk, string apiKey) Parameters id int The ID of the InterpersonalRisks to be updated. interpersonalRisk InterpersonalRisks The replacement InterpersonalRisks. apiKey string Returns Task<int> UpdatePersonalRiskAsync(int, PersonalRisks, string) Updates the PersonalRisks with the matching ID with new values. Task<int> UpdatePersonalRiskAsync(int id, PersonalRisks personalRisk, string apiKey) Parameters id int The ID of the PersonalRisks to be updated. personalRisk PersonalRisks The replacement PersonalRisks. apiKey string Returns Task<int> UpdateProjectRiskAsync(int, ProjectRisks, string) Updates the ProjectRisks with the matching ID with new values. Task<int> UpdateProjectRiskAsync(int id, ProjectRisks projectRisk, string apiKey) Parameters id int The ID of the ProjectRisks to be updated. projectRisk ProjectRisks The replacement ProjectRisks. apiKey string Returns Task<int>"
  },
  "api/T217_Capstone_Project_API.Repositories.Interfaces.IStakeholderRepository.html": {
    "href": "api/T217_Capstone_Project_API.Repositories.Interfaces.IStakeholderRepository.html",
    "title": "Interface IStakeholderRepository | StakeholderRisks",
    "summary": "Interface IStakeholderRepository Namespace T217_Capstone_Project_API.Repositories.Interfaces Assembly T217 Capstone Project API.dll Repository used to connect the application to the Stakeholders table in the Database. public interface IStakeholderRepository Methods CreateStakeholderAsync(StakeholderDTO, string) Creates a new Stakeholder in the database. Task<Stakeholder> CreateStakeholderAsync(StakeholderDTO stakeholderDTO, string apiKey) Parameters stakeholderDTO StakeholderDTO The StakeholderDTO to be added.. apiKey string Returns Task<Stakeholder> DeleteStakeholderAsync(int, string) Deletes a Stakeholder from the database. Task<int> DeleteStakeholderAsync(int id, string apiKey) Parameters id int The ID of the Stakeholder to be deleted. apiKey string Returns Task<int> GetStakeholderAsync(int, string) Returns the Stakeholder from the database with the matching ID. Task<Stakeholder> GetStakeholderAsync(int id, string apiKey) Parameters id int The ID of the desired Stakeholder. apiKey string Returns Task<Stakeholder> GetStakeholderListAsync(string) Returns a list of all Stakeholder from the database. Task<List<Stakeholder>> GetStakeholderListAsync(string apiKey) Parameters apiKey string Returns Task<List<Stakeholder>> GetStakeholderListByProjectAsync(int, string) Returns a list of all Stakeholder that the User has access to. Task<List<Stakeholder>> GetStakeholderListByProjectAsync(int id, string apiKey) Parameters id int The ID of the current Project. apiKey string Returns Task<List<Stakeholder>> UpdateStakeholderAsync(int, Stakeholder, string) Updates the Stakeholder with the matching ID with new values. Task<int> UpdateStakeholderAsync(int id, Stakeholder stakeholder, string apiKey) Parameters id int The ID of the Stakeholder to be updated. stakeholder Stakeholder apiKey string Returns Task<int>"
  },
  "api/T217_Capstone_Project_API.Repositories.Interfaces.IUserRepository.html": {
    "href": "api/T217_Capstone_Project_API.Repositories.Interfaces.IUserRepository.html",
    "title": "Interface IUserRepository | StakeholderRisks",
    "summary": "Interface IUserRepository Namespace T217_Capstone_Project_API.Repositories.Interfaces Assembly T217 Capstone Project API.dll Repository used to connect the application to the Users table in the Database. public interface IUserRepository Methods CreateUserAsync(CreateUserDTO) Creates a new User in the database. Task<User> CreateUserAsync(CreateUserDTO user) Parameters user CreateUserDTO The UserDTO to be added to the database. Returns Task<User> DeleteUserAsync(int) Deletes the User from the database with the matching ID. Task<bool> DeleteUserAsync(int id) Parameters id int The ID of the User to be deleted. Returns Task<bool> GetApiKeyAsync(string, string) Returns the API key of the User from the database with the matching email and password. Task<string> GetApiKeyAsync(string email, string password) Parameters email string The email of the desired User. password string The password of the desired User. Returns Task<string> GetUserAsync(int) Returns the User from the database with the matching ID. Task<User> GetUserAsync(int id) Parameters id int The ID of the desired User. Returns Task<User> GetUserByApiKeyAsync(string) Returns the User from the database with the matching API key. User GetUserByApiKeyAsync(string apiKey) Parameters apiKey string The API key of the desired User. Returns User GetUserByEmailAsync(string) Returns the User from the database with the matching email. Task<User> GetUserByEmailAsync(string email) Parameters email string The email of the desired User. Returns Task<User> GetUserListAsync() Returns a list of all Users from the database. Task<List<User>> GetUserListAsync() Returns Task<List<User>> UpdateUserAsync(int, User) Updates the User on the database with the specified ID with new values. Task<int> UpdateUserAsync(int id, User user) Parameters id int The ID of the User to be updated. user User The replacement User. Returns Task<int>"
  },
  "api/T217_Capstone_Project_API.Repositories.Interfaces.html": {
    "href": "api/T217_Capstone_Project_API.Repositories.Interfaces.html",
    "title": "Namespace T217_Capstone_Project_API.Repositories.Interfaces | StakeholderRisks",
    "summary": "Namespace T217_Capstone_Project_API.Repositories.Interfaces Interfaces IProjectRepository Repository used to connect the application to the Projects table in the Database. IProjectUserRepository Repository used to connect the application to the ProjectUsers table in the Database. IRisksRepository Repository used to connect the application to the Risks tables in the Database. IStakeholderRepository Repository used to connect the application to the Stakeholders table in the Database. IUserRepository Repository used to connect the application to the Users table in the Database."
  },
  "api/T217_Capstone_Project_API.Repositories.ProjectRepository.html": {
    "href": "api/T217_Capstone_Project_API.Repositories.ProjectRepository.html",
    "title": "Class ProjectRepository | StakeholderRisks",
    "summary": "Class ProjectRepository Namespace T217_Capstone_Project_API.Repositories Assembly T217 Capstone Project API.dll Supports all classes in the .NET class hierarchy and provides low-level services to derived classes. This is the ultimate base class of all .NET classes; it is the root of the type hierarchy. public class ProjectRepository : IProjectRepository Inheritance object ProjectRepository Implements IProjectRepository Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ProjectRepository(StakeholderRisksContext) public ProjectRepository(StakeholderRisksContext context) Parameters context StakeholderRisksContext Methods CreateProjectAsync(ProjectDTO, string) Creates a new Project and associated ProjectUser in the database. public Task<Project> CreateProjectAsync(ProjectDTO project, string apiKey) Parameters project ProjectDTO The ProjectDTO to be added. apiKey string Returns Task<Project> DeleteProjectAsync(int, string) Deletes a Project from the database. public Task<int> DeleteProjectAsync(int id, string apiKey) Parameters id int The ID of the Project to be deleted. apiKey string Returns Task<int> GetProjectAsync(int, string) Returns the Project from the database with the matching ID. public Task<Project> GetProjectAsync(int id, string apiKey) Parameters id int The ID of the desired Project. apiKey string Returns Task<Project> GetProjectListAsync(string) Returns a list of all Projects from the database. public Task<List<Project>> GetProjectListAsync(string apiKey) Parameters apiKey string Returns Task<List<Project>> UpdateProjectAsync(int, Project, string) Updates the Project with the matching ID with new values. public Task<int> UpdateProjectAsync(int id, Project project, string apiKey) Parameters id int The ID of the project to be updated. project Project The replacement Project. apiKey string Returns Task<int>"
  },
  "api/T217_Capstone_Project_API.Repositories.ProjectUserRepository.html": {
    "href": "api/T217_Capstone_Project_API.Repositories.ProjectUserRepository.html",
    "title": "Class ProjectUserRepository | StakeholderRisks",
    "summary": "Class ProjectUserRepository Namespace T217_Capstone_Project_API.Repositories Assembly T217 Capstone Project API.dll Supports all classes in the .NET class hierarchy and provides low-level services to derived classes. This is the ultimate base class of all .NET classes; it is the root of the type hierarchy. public class ProjectUserRepository : IProjectUserRepository Inheritance object ProjectUserRepository Implements IProjectUserRepository Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ProjectUserRepository(StakeholderRisksContext) public ProjectUserRepository(StakeholderRisksContext context) Parameters context StakeholderRisksContext Methods AddNewProjectUserAsync(int, int, string, ProjectUserPermissionsDTO) Creates a new ProjectUser for a User, associated with an existing Project. public Task<ProjectUser> AddNewProjectUserAsync(int projectID, int newUserID, string apiKey, ProjectUserPermissionsDTO projectUserPermissions) Parameters projectID int The ID of the Project. newUserID int The ID of the User. apiKey string projectUserPermissions ProjectUserPermissionsDTO The permissions that the new ProjectUser will have. Returns Task<ProjectUser> CreateProjectUserAsync(ProjectUser) Creates a new ProjectUser. public Task<ProjectUser> CreateProjectUserAsync(ProjectUser projectUser) Parameters projectUser ProjectUser The ProjectUser to be created. Returns Task<ProjectUser> The created ProjectUser. DeleteProjectUserAsync(int, string) Deletes the ProjectUser with the associated ID. public Task<int> DeleteProjectUserAsync(int id, string apiKey) Parameters id int The ID of the ProjectUser. apiKey string Returns Task<int> GetProjectUserAsync(int) Returns the ProjectUser from the database with the matching ID. public Task<ProjectUser> GetProjectUserAsync(int id) Parameters id int The ID of the ProjectUser Returns Task<ProjectUser> The ProjectUser with the matching ID. GetProjectUserByUserAndProjectAsync(int, int) Returns the ProjectUser associated with both the UserID and ProjectID. public Task<ProjectUser> GetProjectUserByUserAndProjectAsync(int userId, int projectId) Parameters userId int The ID of the User. projectId int The ID of the Project. Returns Task<ProjectUser> The ProjectUser assocaited with both the UserID and ProjectID. GetProjectUserListAsync() Returns a list of ProjectUsers. public Task<List<ProjectUser>> GetProjectUserListAsync() Returns Task<List<ProjectUser>> A list of ProjectUsers. GetProjectUserListByProjectAsync(int, string) Returns a list of ProjectUsers associated with teh ProjectID. public Task<List<ProjectUser>> GetProjectUserListByProjectAsync(int id, string apiKey) Parameters id int The ID of the Project. apiKey string Returns Task<List<ProjectUser>> A list of ProjectUsers assoicated with the ProjectID.. GetProjectUserListByUserAsync(int) Returns a list of ProjectUsers associated with the UserID. public Task<List<ProjectUser>> GetProjectUserListByUserAsync(int id) Parameters id int The ID of the User. Returns Task<List<ProjectUser>> A list of ProjectUsers associated with the UserID.. UpdateProjectUserAsync(int, string, ProjectUserPermissionsDTO) Updates the permissions of the ProjectUser with the associated ID. public Task<int> UpdateProjectUserAsync(int id, string apiKey, ProjectUserPermissionsDTO projectUserPermissions) Parameters id int The ID of the ProjectUser. apiKey string projectUserPermissions ProjectUserPermissionsDTO The new permissions for the ProjectUser. Returns Task<int>"
  },
  "api/T217_Capstone_Project_API.Repositories.RisksRepository.html": {
    "href": "api/T217_Capstone_Project_API.Repositories.RisksRepository.html",
    "title": "Class RisksRepository | StakeholderRisks",
    "summary": "Class RisksRepository Namespace T217_Capstone_Project_API.Repositories Assembly T217 Capstone Project API.dll Supports all classes in the .NET class hierarchy and provides low-level services to derived classes. This is the ultimate base class of all .NET classes; it is the root of the type hierarchy. public class RisksRepository : IRisksRepository Inheritance object RisksRepository Implements IRisksRepository Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors RisksRepository(StakeholderRisksContext) public RisksRepository(StakeholderRisksContext context) Parameters context StakeholderRisksContext Methods CreateEnvironmentalRiskAsync(EnvironmentalRisksDTO, string) Creates a new EnvironmentalRisks in the database. public Task<EnvironmentalRisks> CreateEnvironmentalRiskAsync(EnvironmentalRisksDTO environmentalRisk, string apiKey) Parameters environmentalRisk EnvironmentalRisksDTO The EnvironmentalRisks to be added. apiKey string Returns Task<EnvironmentalRisks> CreateInterpersonalRiskAsync(InterpersonalRisksDTO, string) Creates a new InterpersonalRisks in the database. public Task<InterpersonalRisks> CreateInterpersonalRiskAsync(InterpersonalRisksDTO interpersonalRisk, string apiKey) Parameters interpersonalRisk InterpersonalRisksDTO The InterpersonalRisks to be added. apiKey string Returns Task<InterpersonalRisks> CreatePersonalRiskAsync(PersonalRisksDTO, string) Creates a new PersonalRisks in the database. public Task<PersonalRisks> CreatePersonalRiskAsync(PersonalRisksDTO personalRisk, string apiKey) Parameters personalRisk PersonalRisksDTO The PersonalRisks to be added. apiKey string Returns Task<PersonalRisks> CreateProjectRiskAsync(ProjectRisksDTO, string) Creates a new ProjectRisks in the database. public Task<ProjectRisks> CreateProjectRiskAsync(ProjectRisksDTO projectRisk, string apiKey) Parameters projectRisk ProjectRisksDTO The ProjectRisks to be added. apiKey string Returns Task<ProjectRisks> DeleteEnvironmentalRiskAsync(int, string) Deletes a EnvironmentalRisks from the database. public Task<int> DeleteEnvironmentalRiskAsync(int id, string apiKey) Parameters id int The ID of the EnvironmentalRisks to be deleted. apiKey string Returns Task<int> DeleteInterpersonalRiskAsync(int, string) Deletes a InterpersonalRisks from the database. public Task<int> DeleteInterpersonalRiskAsync(int id, string apiKey) Parameters id int The ID of the InterpersonalRisks to be deleted. apiKey string Returns Task<int> DeletePersonalRiskAsync(int, string) Deletes a PersonalRisks from the database. public Task<int> DeletePersonalRiskAsync(int id, string apiKey) Parameters id int The ID of the PersonalRisks to be deleted. apiKey string Returns Task<int> DeleteProjectRiskAsync(int, string) Deletes a ProjectRisks from the database. public Task<int> DeleteProjectRiskAsync(int id, string apiKey) Parameters id int The ID of the ProjectRisks to be deleted. apiKey string Returns Task<int> GetEnvironmentalRiskAsync(int, string) Returns the EnvironmentalRisks from the database with the matching ID. public Task<EnvironmentalRisks> GetEnvironmentalRiskAsync(int id, string apiKey) Parameters id int The ID of the desired EnvironmentalRisks. apiKey string Returns Task<EnvironmentalRisks> GetEnvironmentalRiskFromStakeholderAsync(int, string) Returns the EnvironmentalRisks from the database with the matching StakeholderID. public Task<EnvironmentalRisks> GetEnvironmentalRiskFromStakeholderAsync(int stakeholderId, string apiKey) Parameters stakeholderId int apiKey string Returns Task<EnvironmentalRisks> GetInterpersonalRiskAsync(int, string) Returns the InterpersonalRisks from the database with the matching ID. public Task<InterpersonalRisks> GetInterpersonalRiskAsync(int id, string apiKey) Parameters id int The ID of the desired InterpersonalRisks. apiKey string Returns Task<InterpersonalRisks> GetInterpersonalRiskFromStakeholderAsync(int, string) Returns the InterpersonalRisks from the database with the matching StakeholderID. public Task<InterpersonalRisks> GetInterpersonalRiskFromStakeholderAsync(int stakeholderId, string apiKey) Parameters stakeholderId int apiKey string Returns Task<InterpersonalRisks> GetPersonalRiskAsync(int, string) Returns the PersonalRisks from the database with the matching ID. public Task<PersonalRisks> GetPersonalRiskAsync(int id, string apiKey) Parameters id int The ID of the desired PersonalRisks. apiKey string Returns Task<PersonalRisks> GetPersonalRiskFromStakeholderAsync(int, string) Returns the PersonalRisks from the database with the matching StakeholderID. public Task<PersonalRisks> GetPersonalRiskFromStakeholderAsync(int stakeholderId, string apiKey) Parameters stakeholderId int apiKey string Returns Task<PersonalRisks> GetProjectRiskAsync(int, string) Returns the ProjectRisks from the database with the matching ID. public Task<ProjectRisks> GetProjectRiskAsync(int id, string apiKey) Parameters id int The ID of the desired ProjectRisks. apiKey string Returns Task<ProjectRisks> GetProjectRiskFromProjectAsync(int, string) Returns the ProjectRisks from the database with the matching ProjectID. public Task<ProjectRisks> GetProjectRiskFromProjectAsync(int projectId, string apiKey) Parameters projectId int apiKey string Returns Task<ProjectRisks> UpdateEnvironmentalRiskAsync(int, EnvironmentalRisks, string) Updates the EnvironmentalRisks with the matching ID with new values. public Task<int> UpdateEnvironmentalRiskAsync(int id, EnvironmentalRisks environmentalRisk, string apiKey) Parameters id int The ID of the EnvironmentalRisks to be updated. environmentalRisk EnvironmentalRisks The replacement EnvironmentalRisks. apiKey string Returns Task<int> UpdateInterpersonalRiskAsync(int, InterpersonalRisks, string) Updates the InterpersonalRisks with the matching ID with new values. public Task<int> UpdateInterpersonalRiskAsync(int id, InterpersonalRisks interpersonalRisk, string apiKey) Parameters id int The ID of the InterpersonalRisks to be updated. interpersonalRisk InterpersonalRisks The replacement InterpersonalRisks. apiKey string Returns Task<int> UpdatePersonalRiskAsync(int, PersonalRisks, string) Updates the PersonalRisks with the matching ID with new values. public Task<int> UpdatePersonalRiskAsync(int id, PersonalRisks personalRisk, string apiKey) Parameters id int The ID of the PersonalRisks to be updated. personalRisk PersonalRisks The replacement PersonalRisks. apiKey string Returns Task<int> UpdateProjectRiskAsync(int, ProjectRisks, string) Updates the ProjectRisks with the matching ID with new values. public Task<int> UpdateProjectRiskAsync(int id, ProjectRisks projectRisk, string apiKey) Parameters id int The ID of the ProjectRisks to be updated. projectRisk ProjectRisks The replacement ProjectRisks. apiKey string Returns Task<int>"
  },
  "api/T217_Capstone_Project_API.Repositories.StakeholderRepository.html": {
    "href": "api/T217_Capstone_Project_API.Repositories.StakeholderRepository.html",
    "title": "Class StakeholderRepository | StakeholderRisks",
    "summary": "Class StakeholderRepository Namespace T217_Capstone_Project_API.Repositories Assembly T217 Capstone Project API.dll Supports all classes in the .NET class hierarchy and provides low-level services to derived classes. This is the ultimate base class of all .NET classes; it is the root of the type hierarchy. public class StakeholderRepository : IStakeholderRepository Inheritance object StakeholderRepository Implements IStakeholderRepository Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors StakeholderRepository(StakeholderRisksContext) public StakeholderRepository(StakeholderRisksContext context) Parameters context StakeholderRisksContext Methods CreateStakeholderAsync(StakeholderDTO, string) Creates a new Stakeholder in the database. public Task<Stakeholder> CreateStakeholderAsync(StakeholderDTO stakeholderDTO, string apiKey) Parameters stakeholderDTO StakeholderDTO The StakeholderDTO to be added.. apiKey string Returns Task<Stakeholder> DeleteStakeholderAsync(int, string) Deletes a Stakeholder from the database. public Task<int> DeleteStakeholderAsync(int id, string apiKey) Parameters id int The ID of the Stakeholder to be deleted. apiKey string Returns Task<int> GetStakeholderAsync(int, string) Returns the Stakeholder from the database with the matching ID. public Task<Stakeholder> GetStakeholderAsync(int id, string apiKey) Parameters id int The ID of the desired Stakeholder. apiKey string Returns Task<Stakeholder> GetStakeholderListAsync(string) Returns a list of all Stakeholder from the database. public Task<List<Stakeholder>> GetStakeholderListAsync(string apiKey) Parameters apiKey string Returns Task<List<Stakeholder>> GetStakeholderListByProjectAsync(int, string) Returns a list of all Stakeholder that the User has access to. public Task<List<Stakeholder>> GetStakeholderListByProjectAsync(int id, string apiKey) Parameters id int The ID of the current Project. apiKey string Returns Task<List<Stakeholder>> UpdateStakeholderAsync(int, Stakeholder, string) Updates the Stakeholder with the matching ID with new values. public Task<int> UpdateStakeholderAsync(int id, Stakeholder stakeholder, string apiKey) Parameters id int The ID of the Stakeholder to be updated. stakeholder Stakeholder apiKey string Returns Task<int>"
  },
  "api/T217_Capstone_Project_API.Repositories.UserRepository.html": {
    "href": "api/T217_Capstone_Project_API.Repositories.UserRepository.html",
    "title": "Class UserRepository | StakeholderRisks",
    "summary": "Class UserRepository Namespace T217_Capstone_Project_API.Repositories Assembly T217 Capstone Project API.dll Supports all classes in the .NET class hierarchy and provides low-level services to derived classes. This is the ultimate base class of all .NET classes; it is the root of the type hierarchy. public class UserRepository : IUserRepository Inheritance object UserRepository Implements IUserRepository Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors UserRepository(StakeholderRisksContext) public UserRepository(StakeholderRisksContext context) Parameters context StakeholderRisksContext Methods CreateUserAsync(CreateUserDTO) Creates a new User in the database. public Task<User> CreateUserAsync(CreateUserDTO user) Parameters user CreateUserDTO The UserDTO to be added to the database. Returns Task<User> DeleteUserAsync(int) Deletes the User from the database with the matching ID. public Task<bool> DeleteUserAsync(int id) Parameters id int The ID of the User to be deleted. Returns Task<bool> GetApiKeyAsync(string, string) Returns the API key of the User from the database with the matching email and password. public Task<string> GetApiKeyAsync(string email, string password) Parameters email string The email of the desired User. password string The password of the desired User. Returns Task<string> GetUserAsync(int) Returns the User from the database with the matching ID. public Task<User> GetUserAsync(int id) Parameters id int The ID of the desired User. Returns Task<User> GetUserByApiKeyAsync(string) Returns the User from the database with the matching API key. public User GetUserByApiKeyAsync(string apiKey) Parameters apiKey string The API key of the desired User. Returns User GetUserByEmailAsync(string) Returns the User from the database with the matching email. public Task<User> GetUserByEmailAsync(string email) Parameters email string The email of the desired User. Returns Task<User> GetUserListAsync() Returns a list of all Users from the database. public Task<List<User>> GetUserListAsync() Returns Task<List<User>> UpdateUserAsync(int, User) Updates the User on the database with the specified ID with new values. public Task<int> UpdateUserAsync(int id, User user) Parameters id int The ID of the User to be updated. user User The replacement User. Returns Task<int>"
  },
  "api/T217_Capstone_Project_API.Repositories.html": {
    "href": "api/T217_Capstone_Project_API.Repositories.html",
    "title": "Namespace T217_Capstone_Project_API.Repositories | StakeholderRisks",
    "summary": "Namespace T217_Capstone_Project_API.Repositories Classes ProjectRepository Supports all classes in the .NET class hierarchy and provides low-level services to derived classes. This is the ultimate base class of all .NET classes; it is the root of the type hierarchy. ProjectUserRepository Supports all classes in the .NET class hierarchy and provides low-level services to derived classes. This is the ultimate base class of all .NET classes; it is the root of the type hierarchy. RisksRepository Supports all classes in the .NET class hierarchy and provides low-level services to derived classes. This is the ultimate base class of all .NET classes; it is the root of the type hierarchy. StakeholderRepository Supports all classes in the .NET class hierarchy and provides low-level services to derived classes. This is the ultimate base class of all .NET classes; it is the root of the type hierarchy. UserRepository Supports all classes in the .NET class hierarchy and provides low-level services to derived classes. This is the ultimate base class of all .NET classes; it is the root of the type hierarchy."
  },
  "api/T217_Capstone_Project_API.StakeholderRisksContext.html": {
    "href": "api/T217_Capstone_Project_API.StakeholderRisksContext.html",
    "title": "Class StakeholderRisksContext | StakeholderRisks",
    "summary": "Class StakeholderRisksContext Namespace T217_Capstone_Project_API Assembly T217 Capstone Project API.dll The DbContext used to connect the application to the Database. public class StakeholderRisksContext : DbContext, IInfrastructure<IServiceProvider>, IDbContextDependencies, IDbSetCache, IDbContextPoolable, IResettableService, IDisposable, IAsyncDisposable Inheritance object DbContext StakeholderRisksContext Implements IInfrastructure<IServiceProvider> IDbContextDependencies IDbSetCache IDbContextPoolable IResettableService IDisposable IAsyncDisposable Inherited Members DbContext.Set<TEntity>() DbContext.Set<TEntity>(string) DbContext.OnConfiguring(DbContextOptionsBuilder) DbContext.ConfigureConventions(ModelConfigurationBuilder) DbContext.OnModelCreating(ModelBuilder) DbContext.SaveChanges() DbContext.SaveChanges(bool) DbContext.SaveChangesAsync(CancellationToken) DbContext.SaveChangesAsync(bool, CancellationToken) DbContext.Dispose() DbContext.DisposeAsync() DbContext.Entry<TEntity>(TEntity) DbContext.Entry(object) DbContext.Add<TEntity>(TEntity) DbContext.AddAsync<TEntity>(TEntity, CancellationToken) DbContext.Attach<TEntity>(TEntity) DbContext.Update<TEntity>(TEntity) DbContext.Remove<TEntity>(TEntity) DbContext.Add(object) DbContext.AddAsync(object, CancellationToken) DbContext.Attach(object) DbContext.Update(object) DbContext.Remove(object) DbContext.AddRange(params object[]) DbContext.AddRangeAsync(params object[]) DbContext.AttachRange(params object[]) DbContext.UpdateRange(params object[]) DbContext.RemoveRange(params object[]) DbContext.AddRange(IEnumerable<object>) DbContext.AddRangeAsync(IEnumerable<object>, CancellationToken) DbContext.AttachRange(IEnumerable<object>) DbContext.UpdateRange(IEnumerable<object>) DbContext.RemoveRange(IEnumerable<object>) DbContext.Find(Type, params object[]) DbContext.FindAsync(Type, params object[]) DbContext.FindAsync(Type, object[], CancellationToken) DbContext.Find<TEntity>(params object[]) DbContext.FindAsync<TEntity>(params object[]) DbContext.FindAsync<TEntity>(object[], CancellationToken) DbContext.FromExpression<TResult>(Expression<Func<IQueryable<TResult>>>) DbContext.Database DbContext.ChangeTracker DbContext.Model DbContext.ContextId DbContext.SavingChanges DbContext.SavedChanges DbContext.SaveChangesFailed object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors StakeholderRisksContext(DbContextOptions) public StakeholderRisksContext(DbContextOptions options) Parameters options DbContextOptions Properties EnvironmentalRisks public DbSet<EnvironmentalRisks> EnvironmentalRisks { get; set; } Property Value DbSet<EnvironmentalRisks> InterpersonalRisks public DbSet<InterpersonalRisks> InterpersonalRisks { get; set; } Property Value DbSet<InterpersonalRisks> PersonalRisks public DbSet<PersonalRisks> PersonalRisks { get; set; } Property Value DbSet<PersonalRisks> ProjectRisks public DbSet<ProjectRisks> ProjectRisks { get; set; } Property Value DbSet<ProjectRisks> ProjectUsers public DbSet<ProjectUser> ProjectUsers { get; set; } Property Value DbSet<ProjectUser> Projects public DbSet<Project> Projects { get; set; } Property Value DbSet<Project> Stakeholders public DbSet<Stakeholder> Stakeholders { get; set; } Property Value DbSet<Stakeholder> Users public DbSet<User> Users { get; set; } Property Value DbSet<User>"
  },
  "api/T217_Capstone_Project_API.html": {
    "href": "api/T217_Capstone_Project_API.html",
    "title": "Namespace T217_Capstone_Project_API | StakeholderRisks",
    "summary": "Namespace T217_Capstone_Project_API Classes Program StakeholderRisksContext The DbContext used to connect the application to the Database."
  },
  "docs/getting-started.html": {
    "href": "docs/getting-started.html",
    "title": "Getting Started | StakeholderRisks",
    "summary": "Getting Started"
  },
  "docs/introduction.html": {
    "href": "docs/introduction.html",
    "title": "Introduction | StakeholderRisks",
    "summary": "Introduction"
  },
  "index.html": {
    "href": "index.html",
    "title": "This is the HOMEPAGE. | StakeholderRisks",
    "summary": "This is the HOMEPAGE. Refer to Markdown for how to write markdown files. Quick Start Notes: Add images to the images folder if the file is referencing an image."
  }
}